#!/bin/sh
#
# srcenv.tests - A cross-shell tool for sourcing POSIX compliant .env scripts
#
# shellcheck disable=SC2016

version() {
    echo "srcenv 1.2.8"
}

# region Help / Usage

header() {
    NORMAL=$(tput sgr0 2> /dev/null || printf "\e[00m")
    BOLD=$(tput bold 2> /dev/null || printf "\e[1m")
    DIM=$(tput dim 2> /dev/null || printf "\e[2m")
    ITALIC=$(tput sitm 2> /dev/null || printf "\e[3m")
    UNDERLINE=$(tput smul 2> /dev/null || printf "\e[4m")

    cat >&2 << EOF
srcenv is a cross-shell tool for sourcing POSIX compliant .env scripts.

${BOLD}${UNDERLINE}Usage${NORMAL}: ${BOLD}srcenv${NORMAL} [${ITALIC}options${NORMAL}] [${ITALIC}files${NORMAL}]
              [-h|--help|-v|--version]

srcenv takes a snapshot of the POSIX shell environment, sources the .env scripts
and prints a script exporting the environment variables that have changed since
the snapshot, for one of the following shells:

    ${DIM}bash, csh/tcsh, dash, elvish, fish, murex, nushell, powershell, zsh${NORMAL}

EOF
}

help() {
    NORMAL=$(tput sgr0 2> /dev/null || printf "\e[00m")
    BOLD=$(tput bold 2> /dev/null || printf "\e[1m")
    ITALIC=$(tput sitm 2> /dev/null || printf "\e[3m")

    cat >&2 << EOF
For listing the command options, use '${0##*/} ${BOLD}--help${NORMAL}'.

For more advanced usage see the srcenv(1) manpage ${ITALIC}('man srcenv')${NORMAL} and/or
https://github.com/ins0mniaque/srcenv/.
EOF
}

usage() {
    NORMAL=$(tput sgr0 2> /dev/null || printf "\e[00m")
    BOLD=$(tput bold 2> /dev/null || printf "\e[1m")
    ITALIC=$(tput sitm 2> /dev/null || printf "\e[3m")
    UNDERLINE=$(tput smul 2> /dev/null || printf "\e[4m")

    cat >&2 << EOF
${BOLD}${UNDERLINE}Options${NORMAL}:
  ${BOLD}--ash                 ${NORMAL}Format the output as an Ash script
  ${BOLD}--bash                ${NORMAL}Format the output as a Bash script
  ${BOLD}--bat, --cmd          ${NORMAL}Format the output as a Windows batch script
  ${BOLD}--csh, --tcsh         ${NORMAL}Format the output as a Csh/Tcsh script
  ${BOLD}--dash                ${NORMAL}Format the output as a Dash script
  ${BOLD}--elvish              ${NORMAL}Format the output as an Elvish script
  ${BOLD}--env                 ${NORMAL}Format the output as a .env file
  ${BOLD}--fish                ${NORMAL}Format the output as a Fish script
  ${BOLD}--ksh, --pdksh        ${NORMAL}Format the output as a Ksh script
  ${BOLD}--launchctl           ${NORMAL}Format the output as a launchctl calls (macOS)
  ${BOLD}--murex               ${NORMAL}Format the output as a Murex script
  ${BOLD}--nu, --nushell       ${NORMAL}Format the output as a Nushell script
  ${BOLD}--posix, --sh         ${NORMAL}Format the output as a POSIX shell script
  ${BOLD}--pwsh, --powershell  ${NORMAL}Format the output as a PowerShell script
  ${BOLD}--zsh                 ${NORMAL}Format the output as a Zsh script
  ${BOLD}-                     ${NORMAL}Source from STDIN
  ${BOLD}-a ARG, --arg ARG,
  ${BOLD}-a=ARG, --arg=ARG     ${NORMAL}Source from string value of ARG
  ${BOLD}-b, --backup          ${NORMAL}Backup changes in SRCENV_UNDO for undo
  ${BOLD}-u, --undo            ${NORMAL}Undo backed up changes from SRCENV_UNDO
  ${BOLD}-e, --export          ${NORMAL}Export all variables ${ITALIC}(Default for .env/.envrc files)${NORMAL}
  ${BOLD}-l, --local           ${NORMAL}Do not export all variables
  ${BOLD}-s, --sort            ${NORMAL}Sort the environment variables alphabetically ${ITALIC}(Default)${NORMAL}
  ${BOLD}-U, --unsorted        ${NORMAL}Keep the environment variables unsorted
  ${BOLD}-h, --help            ${NORMAL}Display help and exit
  ${BOLD}-v, --version         ${NORMAL}Display the version number and exit

For more advanced usage see the srcenv(1) manpage ${ITALIC}('man srcenv')${NORMAL} and/or
https://github.com/ins0mniaque/srcenv/.
EOF
}

invalid() {
    NORMAL=$(tput sgr0 2> /dev/null || printf "\e[00m")
    BOLD=$(tput bold 2> /dev/null || printf "\e[1m")
    ITALIC=$(tput sitm 2> /dev/null || printf "\e[3m")
    UNDERLINE=$(tput smul 2> /dev/null || printf "\e[4m")
    RED=$(tput setaf 1 2> /dev/null || printf "\e[31m")
    YELLOW=$(tput setaf 3 2> /dev/null || printf "\e[33m")

    cat >&2 << EOF
${BOLD}${RED}error:${NORMAL} unexpected argument '${YELLOW}$1${NORMAL}' found

${BOLD}${UNDERLINE}Usage${NORMAL}: ${BOLD}srcenv${NORMAL} [${ITALIC}options${NORMAL}] [${ITALIC}files${NORMAL}]
              [-h|--help|-v|--version]

For more information, try '${0##*/} ${BOLD}--help${NORMAL}'.
EOF
}

# endregion Help / Usage

if [ $# = 0 ]; then
    header; help; exit 0
fi

case $(ps -o comm= -p "$PPID") in
    -ash|ash)       set -- --ash "$@" ;;
    -bash|bash)     set -- --bash "$@" ;;
    -csh|csh)       set -- --csh "$@" ;;
    -tcsh|tcsh)     set -- --tcsh "$@" ;;
    -dash|dash)     set -- --dash "$@" ;;
    -ksh|ksh)       set -- --ksh "$@" ;;
    -pdksh|pdksh)   set -- --pdksh "$@" ;;
    -murex|murex)   set -- --murex "$@" ;;
    -sh|sh)         set -- --sh "$@" ;;
    -zsh|zsh)       set -- --zsh "$@" ;;
    -elvish|elvish) set -- --elvish "$@" ;;
    -fish|fish)     set -- --fish "$@" ;;
    -nu|nu)         set -- --nu "$@" ;;
    -pwsh|pwsh|\
    -powershell|\
    powershell)     set -- --pwsh "$@" ;;
esac

prefix=
format=
export=
backup=
undo=

diff='reduce (env|keys_unsorted[]) as $k ({}; if env[$k] != $snapshot[$k] then .[$k]=env[$k] else . end)'
ffid='reduce (env|keys_unsorted[]) as $k ({}; if env[$k] != $snapshot[$k] then .[$k]=$snapshot[$k] else . end)'
keys='keys[] as $k'
sort='to_entries | sort_by(.key) | from_entries'

setbackup() {
    if [ -z "$SRCENV_UNDO" ]; then
        backup='| ('$ffid') as $ffid | if $ffid != {} then . += { SRCENV_UNDO: ($ffid | . += { SRCENV_UNDO: null } | '$sort' | tostring) } else . end'
    else
        backup='| . += { SRCENV_UNDO: ('$ffid' | . += { SRCENV_UNDO: null } | '$sort' | tostring) }'
    fi
}

fmt() {
    format='if .[$k] != null then "'$1'" else "'$2'" end';
}

fmt '\($k)=\(.[$k]|@sh)' '\($k)='

src() {
    [ "$3" = --export ] && set -a

    if [ "$1" = var ]; then
        eval "$2" > /dev/null
    else
        # shellcheck disable=SC1090
        . "$2" > /dev/null
    fi

    [ "$3" = --export ] && set +a
}

snapshot=$(jq -n 'env')

while [ $# -gt 0 ]; do
    case $1 in
        --ash|\
        --bash|\
        --csh|--tcsh|\
        --dash|\
        --ksh|--pdksh|\
        --murex|\
        --posix|--sh|\
        --zsh)               fmt 'export \($k)=\(.[$k]|@sh)'   'unset \($k)';        shift ;;
        --elvish)            fmt 'set-env $\($k) \(.[$k]|@sh)' 'unset-env $\($k)';   shift ;;
        --fish)              fmt 'set -gx \($k) \(.[$k]|@sh)'  'set -e \($k)';       shift ;;
        --nu|--nushell)      fmt '$env.\($k) = \(.[$k]|@sh)'   '$env.\($k) = null';  shift ;;
        --pwsh|--powershell) fmt '$Env:\($k) = \(.[$k]|@sh)'   '$Env:\($k) = $null'; shift ;;
        --env)               fmt '\($k)=\(.[$k]|@sh)'          '\($k)=';             shift ;;
        --bat|--cmd)         fmt 'set \"\($k)=\(.[$k] | gsub("\n"; "%LF%") | gsub("\""; "^\""))\"' \
                                 'set \($k)=';
                             prefix="set LFM=^\n\n\nset LF=^^^%LFM%%LFM%^%LFM%%LFM%"; shift ;;
        --launchctl)         fmt 'launchctl setenv \($k) \(.[$k]|@sh)' \
                                 'launchctl unsetenv \($k)';                          shift ;;

        -b|--backup)   backup=1;             shift ;;
        -u|--undo)     undo='$undo | . += '; shift ;;
        -e|--export)   export=--export;      shift ;;
        -l|--local)    export=0;             shift ;;
        -s|--sort)     keys='keys[] as $k';
                       sort='to_entries | sort_by(.key) | from_entries'; shift ;;
        -U|--unsorted) keys='keys_unsorted[] as $k'; sort='.';           shift ;;

        -\?|-h|--help) header; usage;                        exit 0 ;;
        -v|--version)  version;                              exit 0 ;;
        -a|--arg)      src var "$2" "$export";               shift; shift ;;
        -a=*|--arg=*)  src var "${1#*=}" "$export";          shift ;;
        -)             src var "$(cat)" "$export";           shift ;;
        -*)            invalid "$1";                         exit 1 ;;
        *.env|*.envrc) src file "$1" "${export:---export}";  shift ;;
        *)             src file "$1" "$export";              shift ;;
    esac
done

[ -n "$backup" ] && setbackup

[ -n "$prefix" ] && echo "$prefix"

jq --argjson snapshot "$snapshot" \
   ${undo:+--argjson} ${undo:+undo} ${undo:+"${SRCENV_UNDO:-{}}"} \
   -rn "$undo $diff $backup | $keys | $format"
