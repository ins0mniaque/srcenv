#!/bin/sh
#
# srcenv.tests - A cross-shell tool for sourcing POSIX compliant .env scripts
#
# shellcheck disable=SC2016

version() {
    echo "srcenv 1.2.0"
}

header() {
    cat >&2 << EOF
srcenv is a cross-shell tool for sourcing POSIX compliant .env scripts.

Usage: srcenv [options] [files]
              [-h|--help|-v|--version]

srcenv takes a snapshot of the POSIX shell environment, sources the .env scripts
and prints a script exporting the environment variables that have changed since
the snapshot, for one of the following shells:

    bash, csh/tcsh, dash, elvish, fish, murex, nushell, powershell, zsh

EOF
}

help() {
    cat >&2 << EOF
For listing the command options, use '${0##*/} --help'.

For more advanced usage see the srcenv(1) manpage ("man srcenv") and/or
https://github.com/ins0mniaque/srcenv/.
EOF
}

usage() {
    cat >&2 << EOF
Options:
  --ash                 Format the output as an Ash script
  --bash                Format the output as a Bash script
  --csh, --tcsh         Format the output as a Csh/Tcsh script
  --dash                Format the output as a Dash script
  --elvish              Format the output as an Elvish script
  --env                 Format the output as a .env file
  --fish                Format the output as a Fish script
  --ksh, --pdksh        Format the output as a Ksh script
  --murex               Format the output as a Murex script
  --nu, --nushell       Format the output as a Nushell script
  --posix, --sh         Format the output as a POSIX shell script
  --pwsh, --powershell  Format the output as a PowerShell script
  --zsh                 Format the output as a Zsh script
  -                     Source from STDIN
  -a ARG, --arg ARG,
  -a=ARG, --arg=ARG     Source from string value of ARG
  -b, --backup          Backup changes in SRCENV_UNDO for undo
  -u, --undo            Undo backed up changes from SRCENV_UNDO
  -e, --export          Export all variables (Default for .env/.envrc files)
  -l, --local           Do not export all variables
  -s, --sort            Sort the environment variables alphabetically (Default)
  -U, --unsorted        Keep the environment variables unsorted
  -h, --help            Display help and exit
  -v, --version         Display the version number and exit

For more advanced usage see the srcenv(1) manpage ("man srcenv") and/or
https://github.com/ins0mniaque/srcenv/.
EOF
}

invalid() {
    cat >&2 << EOF
error: unexpected argument '$1' found

Usage: srcenv [options] [files]
              [-h|--help|-v|--version]

For more information, try '${0##*/} --help'.
EOF
}

src() {
    [ "$3" = --export ] && set -a

    if [ "$1" = var ]; then
        eval "$2" > /dev/null
    else
        # shellcheck disable=SC1090
        . "$2" > /dev/null
    fi

    [ "$3" = --export ] && set +a
}

if [ $# = 0 ]; then
    header; help; exit 0
fi

case $(ps -o comm= -p "$PPID") in
    -ash|ash)       set -- --ash "$@" ;;
    -bash|bash)     set -- --bash "$@" ;;
    -csh|csh)       set -- --csh "$@" ;;
    -tcsh|tcsh)     set -- --tcsh "$@" ;;
    -dash|dash)     set -- --dash "$@" ;;
    -ksh|ksh)       set -- --ksh "$@" ;;
    -pdksh|pdksh)   set -- --pdksh "$@" ;;
    -murex|murex)   set -- --murex "$@" ;;
    -sh|sh)         set -- --sh "$@" ;;
    -zsh|zsh)       set -- --zsh "$@" ;;
    -elvish|elvish) set -- --elvish "$@" ;;
    -fish|fish)     set -- --fish "$@" ;;
    -nu|nu)         set -- --nu "$@" ;;
    -pwsh|pwsh|\
    -powershell|\
    powershell)     set -- --pwsh "$@" ;;
esac

diff='reduce (env|keys_unsorted[]) as $k ({}; if env[$k] != $snapshot[$k] then .[$k]=env[$k] else . end)'
ffid='reduce (env|keys_unsorted[]) as $k ({}; if env[$k] != $snapshot[$k] then .[$k]=$snapshot[$k] else . end)'
keys='keys[] as $k'
format=
export=
backup=
undo=

fmt() {
    format='if .[$k] != null then "'$1'" else "'$2'" end';
}

fmt '\($k)=\(.[$k]|@sh)' '\($k)='

snapshot=$(jq -n 'env')

while [ $# -gt 0 ]; do
    case $1 in
        --ash|\
        --bash|\
        --csh|--tcsh|\
        --dash|\
        --ksh|--pdksh|\
        --murex|\
        --posix|--sh|\
        --zsh)               fmt 'export \($k)=\(.[$k]|@sh)'   'unset \($k)';        shift ;;
        --elvish)            fmt 'set-env $\($k) \(.[$k]|@sh)' 'unset-env $\($k)';   shift ;;
        --fish)              fmt 'set -gx \($k) \(.[$k]|@sh)'  'set -e \($k)';       shift ;;
        --nu|--nushell)      fmt '$env.\($k) = \(.[$k]|@sh)'   '$env.\($k) = null';  shift ;;
        --pwsh|--powershell) fmt '$Env:\($k) = \(.[$k]|@sh)'   '$Env:\($k) = $null'; shift ;;
        --env)               fmt '\($k)=\(.[$k]|@sh)'          '\($k)=';             shift ;;

        -b|--backup)   backup='| . += { SRCENV_UNDO: ('$ffid' | tostring) }'; shift ;;
        -u|--undo)     undo='$undo | . += ';         shift ;;
        -e|--export)   export=--export;              shift ;;
        -l|--local)    export=0;                     shift ;;
        -s|--sort)     keys='keys[] as $k';          shift ;;
        -U|--unsorted) keys='keys_unsorted[] as $k'; shift ;;

        -\?|-h|--help) header; usage;                        exit 0 ;;
        -v|--version)  version;                              exit 0 ;;
        -a|--arg)      src var "$2" "$export";               shift; shift ;;
        -a=*|--arg=*)  src var "${1#*=}" "$export";          shift ;;
        -)             src var "$(cat)" "$export";           shift ;;
        -*)            invalid "$1";                         exit 1 ;;
        *.env|*.envrc) src file "$1" "${export:---export}";  shift ;;
        *)             src file "$1" "$export";              shift ;;
    esac
done

jq --argjson snapshot "$snapshot" \
   ${undo:+--argjson} ${undo:+undo} ${undo:+"$SRCENV_UNDO"} \
   -rn "$undo $diff $backup | $keys | $format"
