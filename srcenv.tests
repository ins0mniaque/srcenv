#!/bin/sh
#
# srcenv.tests - Test suite for srcenv
#
# shellcheck disable=SC2016

# region Framework
#
# Usage: start
#        run [<skip>] <command> <expected output> [<expected exit code>]
#        when [<skip>] <command>
#        msg [err|warn] <message>
#        end

tests_sequence=0
tests_skipped=0
tests_passed=0
tests_failed=0
tests_to_run=
tests_to_skip=

for filter in "$@"; do
    case $filter in
        '') ;;
        -*) tests_to_skip="$tests_to_skip ${filter#-} " ;;
        *)  tests_to_run="$tests_to_run $filter "       ;;
    esac
done

NORMAL=$(tput sgr0 2> /dev/null || printf '\033[0m')
BOLD=$(tput bold 2> /dev/null || printf '\033[1m')
DIM=$(tput dim 2> /dev/null || printf '\033[2m')
RED=$(tput setaf 1 2> /dev/null || printf '\033[31m')
GREEN=$(tput setaf 2 2> /dev/null || printf '\033[32m')
YELLOW=$(tput setaf 3 2> /dev/null || printf '\033[33m')
DLM=$(printf '\032')
LF='
'

start() { msg 'Running...'; }

capture() {
    # shellcheck disable=SC2153
    if [ "$KSH_VERSION" = "Version AJM 93u+ 2012-08-01" ]; then
        stdout=$( (printf "${DLM}%s${DLM}" "$(trap 'printf "${DLM}%d" "$?"' EXIT; "$@" 3>&1 1>&2 2>&3)" ) 2>&1 )
        exitcode=${stdout%"${DLM}"*"${DLM}"}
        exitcode=${exitcode#*"${DLM}"}
        stderr=${stdout%"${DLM}"}
        stderr=${stderr##*"${DLM}"}
        stderr=${stderr%"${LF}"}
        stdout=${stdout%%"${DLM}"*}
        stdout=${stdout%"${LF}"}
    else
        stdout=$( (printf "${DLM}%s${DLM}" "$(trap 'printf "${DLM}%d" "$?"' EXIT; "$@")" 1>&2) 2>&1 )
        exitcode=${stdout%"${DLM}"}
        exitcode=${exitcode##*"${DLM}"}
        stderr=${stdout%%"${DLM}"*}
        stderr=${stderr%"${LF}"}
        stdout=${stdout#*"${DLM}"}
        stdout=${stdout%"${DLM}"*"${DLM}"}
        stdout=${stdout%"${LF}"}
    fi

    return "$exitcode"
}

run() {
    id=$((tests_sequence + 1)); tests_sequence=$id

    case $tests_to_run in
        *\ $id\ *)  ;;
        '')         ;;
        *) return 1 ;;
    esac

    case $tests_to_skip in
        *\ $id\ *) return 1 ;;
        *)                  ;;
    esac

    case $1 in
        0|'') tests_skipped=$((tests_skipped + 1))
              msg test warn "$id" "${2%%"${LF}"*}: " "${YELLOW}Skipped${NORMAL}"
              return 1 ;;
        1)    shift    ;;
    esac

    cmd=$1; capture eval "$cmd"
    cmd=${cmd%%"${LF}"*}
    expected=$2; expected_exitcode=${3:-0} 

    if [ "$exitcode" != "$expected_exitcode" ]; then
        tests_failed=$((tests_failed + 1))
        msg test err "$id" "${cmd}: " "Exit code ${YELLOW}$exitcode${NORMAL} ${BOLD}${RED}!=${NORMAL} Exit code ${YELLOW}$expected_exitcode${NORMAL}"
    elif [ "$stdout" != "$expected" ]; then
        tests_failed=$((tests_failed + 1))
        msg test err "$id" "$cmd"
    else
        tests_passed=$((tests_passed + 1))
        msg test "$id" "$cmd"
    fi

    if [ -n "$stderr" ]; then
        if [ "$exitcode" = 0 ] || [ "$exitcode" = "$expected_exitcode" ]; then
            msg test out "$id" "${BOLD}${DIM}❯${NORMAL} " "$stderr"
        else
            msg test err "$id" "${BOLD}${RED}❯${NORMAL} " "$stderr"
        fi
    fi

    if [ "$stdout" != "$expected" ]; then
        msg test err "$id" "${BOLD}${RED}❯${NORMAL} " "${BOLD}${RED}mismatch:${NORMAL} $stdout ${BOLD}${RED}!=${NORMAL} $expected"
    fi
}

when() {
    case $1 in
        0|'') return 1 ;;
        1)    shift    ;;
    esac

    "$@"
}

end() {
    if [ $tests_failed -gt 0 ]; then
        msg err "$(printf "${GREEN}%s${NORMAL} tests passed, ${RED}%s${NORMAL} tests failed, ${YELLOW}%s${NORMAL} tests skipped\n" "$tests_passed" "$tests_failed" "$tests_skipped")"
        exit 1
    fi

    if [ $tests_skipped -gt 0 ]; then
        msg warn "$(printf "${GREEN}%s${NORMAL} tests passed, ${YELLOW}%s${NORMAL} tests skipped\n" "$tests_passed" "$tests_skipped")"
        exit 0
    fi

    msg "$(printf "${GREEN}%s${NORMAL} tests passed\n" "$tests_passed")"  
    exit 0
}

msg() {
    case $1 in
        test) case $2 in
                  err)  indent "$(printf "${RED}✖${NORMAL} ${DIM}%3s.${NORMAL} %s"    "$3" "$4")" "$5" ;;
                  warn) indent "$(printf "${YELLOW}▲${NORMAL} ${DIM}%3s.${NORMAL} %s" "$3" "$4")" "$5" ;;
                  out)  indent "$(printf "  ${DIM}%3s.${NORMAL} %s"                   "$3" "$4")" "$5" ;;
                  *)    indent "$(printf "${GREEN}✔${NORMAL} ${DIM}%3s.${NORMAL} %s"  "$2" "$3")" "$4" ;;
              esac ;;
        err)  echo "${RED}✖${NORMAL} ${BOLD}srcenv tests:${NORMAL} $2"    ;;
        warn) echo "${YELLOW}▲${NORMAL} ${BOLD}srcenv tests:${NORMAL} $2" ;;
        *)    echo "${GREEN}✔${NORMAL} ${BOLD}srcenv tests:${NORMAL} $1"  ;;
    esac
}

indent() {
    printf '%s\n' "$2" | while IFS= read -r line; do
        printf '%s%s\n' "$1" "$line"
    done
}

# endregion Framework

# region Setup

export SRCENV_COLOR=always
export SRCENV_DATA_DIR="$PWD"
export SRCENV_JQ_BINARY=${COMSPEC:+1}

tee auto.json > /dev/null << EOF
{
  "${PWD%/*}": { "args": "test.noauto.env", "hashes": { "test.noauto.env": "02c31a24c993ef6d3f5d06018118048f5878fb909607fc333d7c5e738132c787" } },
  "$PWD": { "args": "test.auto.env", "hashes": { "test.auto.env": "c3df617eb6e340afade1077074206dc03928891877d225e864e8f3ec18d6608d" } },
  "$PWD/space env": { "args": "../test.noauto.env", "hashes": { "../test.noauto.env": "0000000000000000000000000000000000000000000000000000000000000000" } }
}
EOF

tee test.auto.env > /dev/null << 'EOF'
SRCENV_TEST_AUTO=auto
EOF

tee test.noauto.env > /dev/null << 'EOF'
SRCENV_TEST_AUTO_NOT_EXISTING=auto
EOF

unset SRCENV_AUTO_DIR
unset SRCENV_AUTO_DIRS
unset SRCENV_AUTO_PWD
unset SRCENV_RESTORE
unset SRCENV_TEST_AUTO
unset SRCENV_TEST_AUTO_NOT_EXISTING
unset SRCENV_TEST_A
unset SRCENV_TEST_B
unset SRCENV_TEST_C
unset SRCENV_TEST_ESCAPE
unset SRCENV_TEST_MULTILINE

export SRCENV_TEST_EXISTING=1
unset SRCENV_TEST_NOT_EXISTING

cp srcenv "space srcenv"

env_input=test.env
posix_input=test.env.sh
json_input=test.env.json
path_input=test.path.env
dir_path_input='space env/test.path.env'
exit_0_input=test.exit.0.env
exit_42_input=test.exit.42.env

tee "$env_input" > /dev/null << 'EOF'
# Interpolation tests
SRCENV_TEST_A=${SRCENV_TEST_EXISTING:+6}
SRCENV_TEST_B=${SRCENV_TEST_NOT_EXISTING:-7}
SRCENV_TEST_C=$((SRCENV_TEST_A * SRCENV_TEST_B))

# Escape sequence tests
SRCENV_TEST_ESCAPE="\$NOT_EXPANDED\t\r\n'\"!x\$(p)\${b}\"'"

# Multi-line tests
SRCENV_TEST_MULTILINE="
$SRCENV_TEST_A
$SRCENV_TEST_B
$SRCENV_TEST_C"
EOF

tee "$posix_input" > /dev/null << 'EOF'
# Unexported variable tests
SRCENV_TEST_NOT_EXPORTED=1

# Interpolation tests
export SRCENV_TEST_A=${SRCENV_TEST_EXISTING:+6}
export SRCENV_TEST_B=${SRCENV_TEST_NOT_EXISTING:-7}
export SRCENV_TEST_C=$((SRCENV_TEST_A * SRCENV_TEST_B * SRCENV_TEST_NOT_EXPORTED))

# Escape sequence tests
export SRCENV_TEST_ESCAPE="\$NOT_EXPANDED\t\r\n'\"!x\$(p)\${b}\"'"

# Multi-line tests
export SRCENV_TEST_MULTILINE="
$SRCENV_TEST_A
$SRCENV_TEST_B
$SRCENV_TEST_C"
EOF

tee "$json_input" > /dev/null << 'EOF'
{
  "SRCENV_TEST_A": "6",
  "SRCENV_TEST_B": "7",
  "SRCENV_TEST_C": "42",
  "SRCENV_TEST_ESCAPE": "$NOT_EXPANDED\\t\\r\\n'\"!x$(p)${b}\"'",
  "SRCENV_TEST_MULTILINE": "\n6\n7\n42"
}
EOF

tee "$path_input" > /dev/null << 'EOF'
# PATH environment variable tests
export PATH="$PWD/bin:$PATH:$PWD/bin"
EOF

mkdir -p "${dir_path_input%/*}"
cp "$path_input" "$dir_path_input"

tee "$exit_0_input" > /dev/null << 'EOF'
exit 0

# Unexported variable tests
export SRCENV_TEST_NOT_EXPORTED=1
EOF

tee "$exit_42_input" > /dev/null << 'EOF'
exit 42

# Unexported variable tests
export SRCENV_TEST_NOT_EXPORTED=1
EOF

# shellcheck disable=SC2317
cleanup() {
    unset SRCENV_TEST_EXISTING

    rm -f auto.json test.auto.env test.noauto.env "space srcenv" "$env_input" "$posix_input" "$json_input" "$path_input" "$dir_path_input" "$exit_0_input" "$exit_42_input"
    rmdir "${dir_path_input%/*}"

    trap - EXIT
    exit
}

trap cleanup EXIT INT HUP TERM

# endregion Setup

# region Scripts

veto='del(.PWD, .OLDPWD, .SHLVL, ._, ._AST_FEATURES, .UPDATE_OS_ENVIRON, .XONSH_CAPTURE_ALWAYS)'
diff='reduce (env|'$veto'|keys[]) as $k ({}; if env[$k] != $snapshot[$k] then .[$k]=env[$k] else . end)'

# TODO: Remove --auto on bump to 1.7.0
{ posix_auto_script="$(cat) '$diff'"; } << 'EOF'
snapshot=$(jq -n env); eval "$(./srcenv init %s --auto)"
run() { %s; }
run
cd 'space env'
run
[ "$SRCENV_AUTO_DIR" != "$PWD" ]        && echo "SRCENV_AUTO_DIR should be equal to '$PWD', but is equal '$SRCENV_AUTO_DIR'"
[ -n "$SRCENV_TEST_AUTO" ]              && echo "SRCENV_TEST_AUTO should not be set"
[ -n "$SRCENV_TEST_AUTO_NOT_EXISTING" ] && echo "SRCENV_TEST_AUTO_NOT_EXISTING should not be set"
cd ..
run
%s
jq %s --argjson snapshot "$snapshot" -n
EOF

{ posix_script="$(cat) '$diff'"; } << 'EOF'
snapshot=$(jq -n env); eval "$(./srcenv %s)"
jq %s --argjson snapshot "$snapshot" -n
EOF

{ posix_init_script="$(cat) '$diff'"; } << 'EOF'
eval "$(./space\\ srcenv init %s)"; src --version
snapshot=$(jq -n env)
src %s
jq %s --argjson snapshot "$snapshot" -n
EOF

{ posix_restore_script="$(cat) '$diff'"; } << 'EOF'
snapshot=$(jq -n env); eval "$(./srcenv %s --backup --verbose)"; eval "$(./srcenv %s --restore --verbose)"
jq %s --argjson snapshot "$snapshot" -n
EOF

if [ -e /dev/stdin ]; then
    { csh_script="$(cat) '$diff'"; } << 'EOF'
set snapshot = "`jq -n env`"; ./srcenv %s | source /dev/stdin
jq %s --argjson snapshot "$snapshot:q" -n
EOF

    { csh_init_script="$(cat) '$diff'"; } << 'EOF'
./space\\ srcenv init %s | source /dev/stdin
src --version
set snapshot = "`jq -n env`"
src %s
jq %s --argjson snapshot "$snapshot:q" -n
EOF

    { csh_restore_script="$(cat) '$diff'"; } << 'EOF'
set snapshot = "`jq -n env`"; ./srcenv %s --backup --verbose | source /dev/stdin; ./srcenv %s --restore --verbose | source /dev/stdin
jq %s --argjson snapshot "$snapshot:q" -n
EOF
else
    { csh_script="$(cat) '$diff'"; } << 'EOF'
set snapshot = "`jq -n env`"; ./srcenv %s > nostdin.csh; source nostdin.csh
rm -f nostdin.csh
jq %s --argjson snapshot "$snapshot:q" -n
EOF

    { csh_init_script="$(cat) '$diff'"; } << 'EOF'
./space\\ srcenv init %s > nostdin.csh; source nostdin.csh
rm -f nostdin.csh
src --version
set snapshot = "`jq -n env`"
src %s
jq %s --argjson snapshot "$snapshot:q" -n
EOF

    { csh_restore_script="$(cat) '$diff'"; } << 'EOF'
set snapshot = "`jq -n env`"; ./srcenv %s --backup --verbose > nostdin.csh; source nostdin.csh; ./srcenv %s --restore --verbose > nostdin.csh; source nostdin.csh
rm -f nostdin.csh
jq %s --argjson snapshot "$snapshot:q" -n
EOF
fi

{ elvish_script="$(cat) '$diff'"; } << 'EOF'
var snapshot = (jq -n env | slurp); eval (./srcenv %s | slurp)
jq %s --argjson snapshot $snapshot -n
EOF

{ elvish_init_script="$(cat) '$diff'"; } << 'EOF'
var src~ = { }; eval &on-end={|ns| set src~ = $ns[src] } ('./space srcenv' init %s); src --version
var snapshot = (jq -n env | slurp)
src %s
jq %s --argjson snapshot $snapshot -n
EOF

{ elvish_restore_script="$(cat) '$diff'"; } << 'EOF'
var snapshot = (jq -n env | slurp); eval (./srcenv %s --backup --verbose | slurp); eval (./srcenv %s --restore --verbose | slurp)
jq %s --argjson snapshot $snapshot -n
EOF

{ fish_script="$(cat) '$diff'"; } << 'EOF'
set snapshot (jq -n env); ./srcenv %s | source
jq %s --argjson snapshot "$snapshot" -n
EOF

{ fish_init_script="$(cat) '$diff'"; } << 'EOF'
'./space srcenv' init %s | source; src --version
set snapshot (jq -n env)
src %s
jq %s --argjson snapshot "$snapshot" -n
EOF

{ fish_restore_script="$(cat) '$diff'"; } << 'EOF'
set snapshot (jq -n env); ./srcenv %s --backup --verbose | source; ./srcenv %s --restore --verbose | source
jq %s --argjson snapshot "$snapshot" -n
EOF

{ ion_script="$(cat) '$diff'"; } << 'EOF'
let snapshot = $(jq -n env); eval "$(./srcenv %s)"
jq %s --argjson snapshot "$snapshot" -n
EOF

{ ion_init_script="$(cat) '$diff'"; } << 'EOF'
eval "$(./space\\ srcenv init %s)"; src [ --version ]
let snapshot = $(jq -n env)
src [ %s ]
jq %s --argjson snapshot "$snapshot" -n
EOF

{ ion_restore_script="$(cat) '$diff'"; } << 'EOF'
let snapshot = $(jq -n env); eval "$(./srcenv %s --backup --verbose ^> /dev/stderr)"; eval "$(./srcenv %s --restore --verbose ^> /dev/stderr)"
jq %s --argjson snapshot "$snapshot" -n
EOF

{ murex_script="$(cat) '$diff'"; } << 'EOF'
jq -n env -> set snapshot; ./srcenv %s -> source
jq %s --argjson snapshot "$snapshot" -n
EOF

{ murex_init_script="$(cat) '$diff'"; } << 'EOF'
./space\\ srcenv init %s -> source; src --version
jq -n env -> set snapshot
src %s
jq %s --argjson snapshot "$snapshot" -n
EOF

{ murex_restore_script="$(cat) '$diff'"; } << 'EOF'
jq -n env -> set snapshot; ./srcenv %s --backup --verbose -> source; ./srcenv %s --restore --verbose -> source
jq %s --argjson snapshot "$snapshot" -n
EOF

{ nu_setup_script=$(cat); } << 'EOF'
^'./space srcenv' %s | save -f test.setup.nu
let SRCENV_JQ_BINARY = '%s'
EOF

{ nu_script="$(cat) '$diff'"; } << 'EOF'
let snapshot = (jq -n env); source test.setup.nu
rm -f test.setup.nu
jq %s --argjson snapshot $snapshot -n
EOF

{ nu_init_script="$(cat) '$diff'"; } << 'EOF'
source test.setup.nu; src --version
rm -f test.setup.nu
let snapshot = (jq -n env)
src %s
jq %s --argjson snapshot $snapshot -n
EOF

{ nu_json_script="$(cat) '$diff'"; } << 'EOF'
let snapshot = (jq -n env); ./srcenv %s | from json | load-env
jq %s --argjson snapshot $snapshot -n
EOF

{ nu_restore_script="$(cat) '$diff'"; } << 'EOF'
let snapshot = (jq -n env); ./srcenv %s --backup --verbose | from json | load-env; ./srcenv %s --restore --verbose | from json | load-env
jq %s --argjson snapshot $snapshot -n
EOF

{ pwsh_script="$(cat) '$diff'"; } << 'EOF'
$snapshot=$(jq -n env); Invoke-Expression ((sh srcenv %s) -join "`n")
jq %s --argjson snapshot "$snapshot" -n
EOF

{ pwsh_init_script="$(cat) '$diff'"; } << 'EOF'
Invoke-Expression (sh 'space srcenv' init %s); src --version
$snapshot=$(jq -n env)
src %s
jq %s --argjson snapshot "$snapshot" -n
EOF

{ pwsh_restore_script="$(cat) '$diff'"; } << 'EOF'
$snapshot=$(jq -n env); Invoke-Expression ((sh srcenv %s --backup --verbose) -join "`n"); Invoke-Expression ((sh srcenv %s --restore --verbose) -join "`n")
jq %s --argjson snapshot "$snapshot" -n
EOF

{ powershell_script="$(cat) '. as \$snapshot | $diff'"; } << 'EOF'
$snapshot=$(jq -n env); Invoke-Expression ((sh srcenv %s) -join "`n")
echo "$snapshot" | jq %s
EOF

{ powershell_init_script="$(cat) '. as \$snapshot | $diff'"; } << 'EOF'
Invoke-Expression (sh 'space srcenv' init %s); src --version
$snapshot=$(jq -n env)
src %s
echo "$snapshot" | jq %s
EOF

{ powershell_restore_script="$(cat) '. as \$snapshot | $diff'"; } << 'EOF'
$snapshot=$(jq -n env); Invoke-Expression ((sh srcenv %s --backup --verbose) -join "`n"); Invoke-Expression ((sh srcenv %s --restore --verbose) -join "`n")
echo "$snapshot" | jq %s
EOF

{ xonsh_script="$(cat) '$diff'"; } << 'EOF'
snapshot=$(jq -n env); execx($(./srcenv %s))
jq %s --argjson snapshot @(snapshot) -n
EOF

{ xonsh_init_script="$(cat) '$diff'"; } << 'EOF'
execx($(./srcenv init %s))
src --version
snapshot=$(jq -n env)
src %s
jq %s --argjson snapshot @(snapshot) -n
EOF

{ xonsh_restore_script="$(cat) '$diff'"; } << 'EOF'
snapshot=$(jq -n env); execx($(./srcenv %s --backup --verbose)); execx($(./srcenv %s --restore --verbose))
jq %s --argjson snapshot @(snapshot) -n
EOF

{ cmd_script="$(cat) \". as \$snapshot | $diff\" snapshot.env
del snapshot.env"; } << 'EOF'
@echo off
jq -n env > snapshot.env
sh srcenv %s > test.env.cmd
call test.env.cmd
del test.env.cmd
jq %s
EOF

{ cmd_init_script=$(cat); } << 'EOF'
@echo off
sh 'space srcenv' init %s > test.env.cmd
call test.env.cmd
del test.env.cmd

rem DOSKEY macros cannot be run non-interactively
rem Testing DOSKEY macro output instead
doskey /macros | findstr ^%s=
EOF

{ cmd_restore_script="$(cat) \". as \$snapshot | $diff\" snapshot.env
del snapshot.env"; } << 'EOF'
@echo off
jq -n env > snapshot.env
sh srcenv %s --backup --verbose > test.env.cmd
call test.env.cmd
sh srcenv %s --restore --verbose > test.env.cmd
call test.env.cmd
del test.env.cmd
jq %s
EOF

# endregion Scripts

# region Outputs

auto_data_test_output='{
  "'$PWD'": {
    "args": "--auto test.env",
    "hashes": {
      "test.env": "4faccc4168deda65c203c07e1d8289512fe0d97553dd0a95e1e42e0c05e7a957"
    }
  }
}'

json_auto_output="{
  \"SRCENV_AUTO_DIR\": \"$PWD\",
  \"SRCENV_AUTO_DIRS\": \"${PWD%/*}:$PWD:$PWD/space env\",
  \"SRCENV_AUTO_PWD\": \"$PWD\",
  \"SRCENV_RESTORE\": \"{\\\"SRCENV_AUTO_DIR\\\":null,\\\"SRCENV_RESTORE\\\":null,\\\"SRCENV_TEST_AUTO\\\":null}\",
  \"SRCENV_TEST_AUTO\": \"auto\"
}"

if [ -n "$COMSPEC" ]; then
    json_auto_output=$(printf '%s' "$json_auto_output" | jq ${SRCENV_JQ_BINARY:+-b} '
.SRCENV_AUTO_DIR  = (.SRCENV_AUTO_DIR  | gsub("^/(?<drive>.)/"; (.drive | ascii_upcase) + ":/")) |
.SRCENV_AUTO_DIRS = (.SRCENV_AUTO_DIRS | gsub(":"; ";") | gsub("(?<sep>^|;)/(?<drive>[a-z])/"; (.sep + .drive | ascii_upcase) + ":\\") | gsub("/"; "\\")) |
.SRCENV_AUTO_PWD  = (.SRCENV_AUTO_PWD  | gsub("^/(?<drive>.)/"; (.drive | ascii_upcase) + ":/"))')
fi

{ json_output=$(cat); } << 'EOF'
{
  "SRCENV_TEST_A": "6",
  "SRCENV_TEST_B": "7",
  "SRCENV_TEST_C": "42",
  "SRCENV_TEST_ESCAPE": "$NOT_EXPANDED\\t\\r\\n'\"!x$(p)${b}\"'",
  "SRCENV_TEST_MULTILINE": "\n6\n7\n42"
}
EOF

{ json_backup_output=$(cat); } << 'EOF'
{
  "SRCENV_RESTORE": "{\"SRCENV_RESTORE\":null,\"SRCENV_TEST_A\":null,\"SRCENV_TEST_B\":null,\"SRCENV_TEST_C\":null,\"SRCENV_TEST_ESCAPE\":null,\"SRCENV_TEST_MULTILINE\":null}",
  "SRCENV_TEST_A": "6",
  "SRCENV_TEST_B": "7",
  "SRCENV_TEST_C": "42",
  "SRCENV_TEST_ESCAPE": "$NOT_EXPANDED\\t\\r\\n'\"!x$(p)${b}\"'",
  "SRCENV_TEST_MULTILINE": "\n6\n7\n42"
}
EOF

{ json_restore_empty_output=$(cat); } << 'EOF'
{
  "SRCENV_RESTORE": "",
  "SRCENV_TEST_A": "",
  "SRCENV_TEST_B": "",
  "SRCENV_TEST_C": "",
  "SRCENV_TEST_ESCAPE": "",
  "SRCENV_TEST_MULTILINE": ""
}
EOF

if [ -z "$COMSPEC" ]; then
    json_path='(env.PWD + "/bin:" + env.PATH + ":" + env.PWD + "/bin")'
    json_path_output_cmd="jq -n '{ PATH: $json_path }'"
    json_path_backup_output_cmd="jq -n '{ PATH: $json_path, SRCENV_RESTORE: ({ PATH: env.PATH, SRCENV_RESTORE: null } | tojson) }'"
else
    json_path='((env.PWD + "/bin;"|gsub("/"; "\\")) + env.PATH + ";" + (env.PWD + "/bin"|gsub("/"; "\\")))'
    json_path_output_cmd="jq -b -n '{ PATH: $json_path }'"
    json_path_backup_output_cmd="jq -b -n '{ PATH: $json_path, SRCENV_RESTORE: ({ PATH: env.PATH, SRCENV_RESTORE: null } | tojson) }'"
fi

{ env_output=$(cat); } << 'EOF'
SRCENV_TEST_A='6'
SRCENV_TEST_B='7'
SRCENV_TEST_C='42'
SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"!x$(p)${b}"'\'''
SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ env_backup_output=$(cat); } << 'EOF'
SRCENV_RESTORE='{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

{ posix_output=$(cat); } << 'EOF'
export SRCENV_TEST_A='6'
export SRCENV_TEST_B='7'
export SRCENV_TEST_C='42'
export SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"!x$(p)${b}"'\'''
export SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ posix_backup_output=$(cat); } << 'EOF'
export SRCENV_RESTORE='{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

cmd_output_prefix="$(printf '@echo off\n\n(set \\n=^^^\n\n^\n\n)\n')${LF}"
cmd_output_suffix=$(printf '\nset \\n=\n')

{ cmd_output=$(cat); } << 'EOF'
set SRCENV_TEST_A=6
set SRCENV_TEST_B=7
set SRCENV_TEST_C=42
set SRCENV_TEST_ESCAPE=$NOT_EXPANDED\t\r\n'"!x$(p)${b}"'
set SRCENV_TEST_MULTILINE=%\n%6%\n%7%\n%42
EOF

{ cmd_backup_output=$(cat); } << 'EOF'
set SRCENV_RESTORE={"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}
EOF

{ csh_output=$(cat); } << 'EOF'
setenv SRCENV_TEST_A '6'
setenv SRCENV_TEST_B '7'
setenv SRCENV_TEST_C '42'
setenv SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"\!x$(p)${b}"'\'''
setenv SRCENV_TEST_MULTILINE '\
6\
7\
42'
EOF

{ csh_backup_output=$(cat); } << 'EOF'
setenv SRCENV_RESTORE '{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

{ elvish_output=$(cat); } << 'EOF'
set-env SRCENV_TEST_A '6'
set-env SRCENV_TEST_B '7'
set-env SRCENV_TEST_C '42'
set-env SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n''"!x$(p)${b}"'''
set-env SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ elvish_backup_output=$(cat); } << 'EOF'
set-env SRCENV_RESTORE '{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

{ fish_output=$(cat); } << 'EOF'
set -gx SRCENV_TEST_A '6'
set -gx SRCENV_TEST_B '7'
set -gx SRCENV_TEST_C '42'
set -gx SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"!x$(p)${b}"'\'''
set -gx SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ fish_backup_output=$(cat); } << 'EOF'
set -gx SRCENV_RESTORE '{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

{ ion_output=$(cat); } << 'EOF'
export SRCENV_TEST_A='6'
export SRCENV_TEST_B='7'
export SRCENV_TEST_C='42'
export SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"!x$(p)${b}"'\'''
export SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ ion_backup_output=$(cat); } << 'EOF'
export SRCENV_RESTORE='{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

{ launchd_output=$(cat); } << 'EOF'
launchctl setenv SRCENV_TEST_A '6'
launchctl setenv SRCENV_TEST_B '7'
launchctl setenv SRCENV_TEST_C '42'
launchctl setenv SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"!x$(p)${b}"'\'''
launchctl setenv SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ launchd_backup_output=$(cat); } << 'EOF'
launchctl setenv SRCENV_RESTORE '{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

{ murex_output=$(cat); } << 'EOF'
out '6' -> export SRCENV_TEST_A
out '7' -> export SRCENV_TEST_B
out '42' -> export SRCENV_TEST_C
out '$NOT_EXPANDED\t\r\n'\''"!x$(p)${b}"'\''' -> export SRCENV_TEST_ESCAPE
out '
6
7
42' -> export SRCENV_TEST_MULTILINE
EOF

{ murex_backup_output=$(cat); } << 'EOF'
out '{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}' -> export SRCENV_RESTORE
EOF

{ nu_output=$(cat); } << 'EOF'
$env.SRCENV_TEST_A = "6"
$env.SRCENV_TEST_B = "7"
$env.SRCENV_TEST_C = "42"
$env.SRCENV_TEST_ESCAPE = "$NOT_EXPANDED\\t\\r\\n'\"!x$(p)${b}\"'"
$env.SRCENV_TEST_MULTILINE = "\n6\n7\n42"
EOF

{ nu_backup_output=$(cat); } << 'EOF'
$env.SRCENV_RESTORE = "{\"SRCENV_RESTORE\":null,\"SRCENV_TEST_A\":null,\"SRCENV_TEST_B\":null,\"SRCENV_TEST_C\":null,\"SRCENV_TEST_ESCAPE\":null,\"SRCENV_TEST_MULTILINE\":null}"
EOF

{ pwsh_output=$(cat); } << 'EOF'
$Env:SRCENV_TEST_A = '6'
$Env:SRCENV_TEST_B = '7'
$Env:SRCENV_TEST_C = '42'
$Env:SRCENV_TEST_ESCAPE = '$NOT_EXPANDED\t\r\n''"!x$(p)${b}"'''
$Env:SRCENV_TEST_MULTILINE = '
6
7
42'
EOF

{ pwsh_backup_output=$(cat); } << 'EOF'
$Env:SRCENV_RESTORE = '{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}'
EOF

xonsh_prefix='with ${...}.swap(UPDATE_OS_ENVIRON=True):'
xonsh_suffix='    pass'

{ xonsh_output=$(cat); } << 'EOF'
    $SRCENV_TEST_A = "6"
    $SRCENV_TEST_B = "7"
    $SRCENV_TEST_C = "42"
    $SRCENV_TEST_ESCAPE = "$NOT_EXPANDED\\t\\r\\n'\"!x$(p)${b}\"'"
    $SRCENV_TEST_MULTILINE = "\n6\n7\n42"
EOF

{ xonsh_backup_output=$(cat); } << 'EOF'
    $SRCENV_RESTORE = "{\"SRCENV_RESTORE\":null,\"SRCENV_TEST_A\":null,\"SRCENV_TEST_B\":null,\"SRCENV_TEST_C\":null,\"SRCENV_TEST_ESCAPE\":null,\"SRCENV_TEST_MULTILINE\":null}"
EOF

fmt() {
    prefix=; suffix=

    case $1 in '') ;; *) prefix="$1{{" ;; esac
    case $2 in '') ;; *) suffix="}}$2" ;; esac

    echo '--format '\'"$prefix"'\($k)☕\(.[$k])??\($k)☕'"$suffix"\'
}

{ format_output=$(cat); } << 'EOF'
SRCENV_TEST_A☕6
SRCENV_TEST_B☕7
SRCENV_TEST_C☕42
SRCENV_TEST_ESCAPE☕$NOT_EXPANDED\t\r\n'"!x$(p)${b}"'
SRCENV_TEST_MULTILINE☕
6
7
42
EOF

{ format_backup_output=$(cat); } << 'EOF'
SRCENV_RESTORE☕{"SRCENV_RESTORE":null,"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null}
EOF

# endregion Outputs

# region Tests

[ -t 0 ] && no_stdin=1 || no_stdin=

run_posix_tests() {
    case $1 in
        0|''|1) ;;
        *)      set -- 1 "$@" ;;
    esac

    [ "$no_stdin" = 1 ] && [ "$1" = 1 ] && when_no_stdin=1 || when_no_stdin=

    run "$1" "$2 --version" 'srcenv 1.6.0'

    run "$when_no_stdin" "$2"                     ''
    run "$1" "$2 --invalid"                       '' 2
    run "$1" "$2 init"                            '' 2
    run "$1" "$2 init sh --cmd 42"                '' 2
    run "$1" "$2 init sh --cmd src42 > /dev/null" ''
    run "$1" "$2 init sh --cmd src,42"            '' 2
    run "$1" "$2 init sh --cmd 'space src'"       '' 2
    run "$1" "$2 rc"                              '' 2
    run "$1" "$2 rc sh --cmd 42"                  '' 2
    run "$1" "$2 rc sh --cmd src42 > /dev/null"   ''
    run "$1" "$2 rc sh --cmd src,42"              '' 2
    run "$1" "$2 rc sh --cmd 'space src'"         '' 2
    run "$1" "$2 sh not_a_file"                   '' 2
    run "$1" "$2 sh --input not_a_command"        '' 127
    run "$1" "$2 sh --json not_a_file"            '' 2
    run "$1" "$2 sh --json --input not_json"      '' 5
    run "$when_no_stdin" "$2 --export"            '' 2

    run "$when_no_stdin" "$2 sh --backup"           '' 2
    run "$when_no_stdin" "$2 sh --export"           '' 2
    run "$when_no_stdin" "$2 sh --json"             '' 2
    run "$when_no_stdin" "$2 sh --restore --export" '' 2
    run "$when_no_stdin" "$2 sh --restore --json"   '' 2
    run "$when_no_stdin" "$2 sh --sort"             '' 2
    run "$1" "$2 sh --restore --sort"               ''
    run "$1" "$2 sh --restore"                      ''
    run "$1" "$2 sh --clear"                        'unset SRCENV_RESTORE'
    run "$1" "SRCENV_RESTORE='' $2 sh --restore"    '' 5
    run "$1" "$2 --restore"                         '' 2
    run "$when_no_stdin" "$2 sh --backup --restore" '' 2

    run "$1" "$2 sh --backup --restore --cmd src"                                ''
    run "$when_no_stdin" "$2 sh --backup --restore --cmd src --backup"           '' 2
    run "$when_no_stdin" "$2 sh --backup --restore --cmd src --export"           '' 2
    run "$when_no_stdin" "$2 sh --backup --restore --cmd src --json"             '' 2
    run "$when_no_stdin" "$2 sh --backup --restore --cmd src --restore --export" '' 2
    run "$when_no_stdin" "$2 sh --backup --restore --cmd src --restore --json"   '' 2
    run "$when_no_stdin" "$2 sh --backup --restore --cmd src --sort"             '' 2
    run "$1" "$2 sh --backup --restore --cmd src --restore --sort"               ''
    run "$1" "$2 sh --backup --restore --cmd src --restore"                      ''
    run "$1" "$2 sh --backup --restore --cmd src --clear"                        'unset SRCENV_RESTORE'

    run "$1" "$2 sh --input 'unset SRCENV_TEST_EXISTING'"    'unset SRCENV_TEST_EXISTING'
    run "$1" "$2 sh --input 'unset SRCENV_TEST_EXISTING' -w" ''
    run "$1" "$2 sh --input 'cd ..'"                         ''
    run "$1" "$2 sh --input 'echo something'"                ''
    run "$1" "$2 sh --input 'echo something; not_a_command'" '' 127
    run "$1" "$2 sh -eiSRCENV_TEST_A=1"                      "export SRCENV_TEST_A='1'"
    run "$1" "$2 sh -eiSRCENV_TEST_A=1 -xSRCENV_TEST_A"      ''
    run "$1" "SRCENV_TEST_A='6' $2 sh -weiSRCENV_TEST_A=1"   ''
    run "$1" "$2 -eiSRCENV_TEST_A=1"                         '' 2

    run "$1" "$2 sh $exit_0_input"             ''
    run "$1" "$2 sh $exit_0_input $env_input"  "$posix_output"
    run "$1" "$2 sh $exit_42_input"            '' 42
    run "$1" "$2 sh $exit_42_input $env_input" '' 42

    run "$1" "$2 sh --input 'exit 0;  export SRCENV_TEST_NOT_EXPORTED=1'"            ''
    run "$1" "$2 sh --input 'exit 0;  export SRCENV_TEST_NOT_EXPORTED=1' $env_input" "$posix_output"
    run "$1" "$2 sh --input 'exit 42; export SRCENV_TEST_NOT_EXPORTED=1'"            '' 42
    run "$1" "$2 sh --input 'exit 42; export SRCENV_TEST_NOT_EXPORTED=1' $env_input" '' 42

    run "$1" "$2 sh $env_input"                              "$posix_output"
    run "$1" "$2 sh --export --input \"\$(cat $env_input)\"" "$posix_output"
    run "$1" "$2 sh --export - < $env_input"                 "$posix_output"
    run "$1" "$2 sh --export < $env_input"                   "$posix_output"
    run "$1" "$2 sh --local $env_input"                      ''
    run "$1" "$2 sh --local --input \"\$(cat $env_input)\""  ''
    run "$1" "$2 sh - < $env_input"                          ''
    run "$1" "$2 sh < $env_input"                            ''

    run "$1" "$2 sh $posix_input"                     "$posix_output"
    run "$1" "$2 sh --input \"\$(cat $posix_input)\"" "$posix_output"
    run "$1" "$2 sh - < $posix_input"                 "$posix_output"
    run "$1" "$2 sh < $posix_input"                   "$posix_output"

    run "$1" "$2 sh --json $env_input"                      '' 5
    run "$1" "$2 sh --json $json_input"                     "$posix_output"
    run "$1" "$2 sh --json --input \"\$(cat $json_input)\"" "$posix_output"
    run "$1" "$2 sh --json - < $json_input"                 "$posix_output"
    run "$1" "$2 sh --json < $json_input"                   "$posix_output"

    export SRCENV_DATA_DIR="$PWD/auto.data.tests"
    mkdir auto.data.tests
    auto_data="$PWD/auto.data.tests/auto.json"
    run "$1"             "$2 sh --off && cat '$auto_data'"             '' 1
    run "$1"             "echo | $2 sh --auto - && cat '$auto_data'"   '' 1
    run "$when_no_stdin" "$2 sh --auto $env_input && cat '$auto_data'" "export SRCENV_AUTO_DIRS='$PWD'${LF}$posix_output${LF}$auto_data_test_output"
    run "$when_no_stdin" "$2 sh --off && cat '$auto_data'"             '{}'
    run "$1"             "$2 sh --off && cat '$auto_data'"             '' 1
    rm -f "$auto_data"
    rmdir auto.data.tests
    export SRCENV_DATA_DIR="$PWD"
}

run_output_tests() {
    case $1 in
        0|''|1) ;;
        *)      set -- 1 "$@" ;;
    esac

    run "$1" "$2 ash $env_input"         "$posix_output"
    run "$1" "$2 bash $env_input"        "$posix_output"
    run "$1" "$2 dash $env_input"        "$posix_output"
    run "$1" "$2 ksh $env_input"         "$posix_output"
    run "$1" "$2 pdksh $env_input"       "$posix_output"
    run "$1" "$2 posix $env_input"       "$posix_output"
    run "$1" "$2 sh $env_input"          "$posix_output"
    run "$1" "$2 zsh $env_input"         "$posix_output"
    run "$1" "$2 clink $env_input"       "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 cmd $env_input"         "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 command $env_input"     "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 csh $env_input"         "$csh_output"
    run "$1" "$2 tcsh $env_input"        "$csh_output"
    run "$1" "$2 elvish $env_input"      "$elvish_output"
    run "$1" "$2 fish $env_input"        "$fish_output"
    run "$1" "$2 ion $env_input"         "$ion_output"
    run "$1" "$2 launchd $env_input"     "$launchd_output"
    run "$1" "$2 murex $env_input"       "$murex_output"
    run "$1" "$2 nu $env_input"          "$nu_output"
    run "$1" "$2 nushell $env_input"     "$nu_output"
    run "$1" "$2 pwsh $env_input"        "$pwsh_output"
    run "$1" "$2 powershell $env_input"  "$pwsh_output"
    run "$1" "$2 xonsh $env_input"       "$xonsh_prefix${LF}$xonsh_output${LF}$xonsh_suffix"
    run "$1" "$2 systemd $env_input"     "$env_output"
    run "$1" "$2 env $env_input"         "$env_output"
    run "$1" "$2 json $env_input"        "$json_output"
    run "$1" "$2 $(fmt '') $env_input"   "$format_output"
    run "$1" "$2 $(fmt ▶) $env_input"    "▶${LF}$format_output"
    run "$1" "$2 $(fmt '' ◼) $env_input" "$format_output${LF}◼"
    run "$1" "$2 $(fmt ▶ ◼) $env_input"  "▶${LF}$format_output${LF}◼"

    run "$1" "$2 --format ash $env_input"        "$posix_output"
    run "$1" "$2 --format bash $env_input"       "$posix_output"
    run "$1" "$2 --format dash $env_input"       "$posix_output"
    run "$1" "$2 --format ksh $env_input"        "$posix_output"
    run "$1" "$2 --format pdksh $env_input"      "$posix_output"
    run "$1" "$2 --format posix $env_input"      "$posix_output"
    run "$1" "$2 --format sh $env_input"         "$posix_output"
    run "$1" "$2 --format zsh $env_input"        "$posix_output"
    run "$1" "$2 --format clink $env_input"      "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 --format cmd $env_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 --format command $env_input"    "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 --format csh $env_input"        "$csh_output"
    run "$1" "$2 --format tcsh $env_input"       "$csh_output"
    run "$1" "$2 --format elvish $env_input"     "$elvish_output"
    run "$1" "$2 --format fish $env_input"       "$fish_output"
    run "$1" "$2 --format ion $env_input"        "$ion_output"
    run "$1" "$2 --format launchd $env_input"    "$launchd_output"
    run "$1" "$2 --format murex $env_input"      "$murex_output"
    run "$1" "$2 --format nu $env_input"         "$nu_output"
    run "$1" "$2 --format nushell $env_input"    "$nu_output"
    run "$1" "$2 --format pwsh $env_input"       "$pwsh_output"
    run "$1" "$2 --format powershell $env_input" "$pwsh_output"
    run "$1" "$2 --format xonsh $env_input"      "$xonsh_prefix${LF}$xonsh_output${LF}$xonsh_suffix"
    run "$1" "$2 --format systemd $env_input"    "$env_output"
    run "$1" "$2 --format env $env_input"        "$env_output"
    run "$1" "$2 --format json $env_input"       "$json_output"

    run "$1" "$2 ash --backup $env_input"         "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 bash --backup $env_input"        "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 dash --backup $env_input"        "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 ksh --backup $env_input"         "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 pdksh --backup $env_input"       "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 posix --backup $env_input"       "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 sh --backup $env_input"          "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 zsh --backup $env_input"         "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 clink --backup $env_input"       "$cmd_output_prefix${LF}$cmd_backup_output${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 cmd --backup $env_input"         "$cmd_output_prefix${LF}$cmd_backup_output${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 command --backup $env_input"     "$cmd_output_prefix${LF}$cmd_backup_output${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 csh --backup $env_input"         "$csh_backup_output${LF}$csh_output"
    run "$1" "$2 tcsh --backup $env_input"        "$csh_backup_output${LF}$csh_output"
    run "$1" "$2 elvish --backup $env_input"      "$elvish_backup_output${LF}$elvish_output"
    run "$1" "$2 fish --backup $env_input"        "$fish_backup_output${LF}$fish_output"
    run "$1" "$2 ion --backup $env_input"         "$ion_backup_output${LF}$ion_output"
    run "$1" "$2 launchd --backup $env_input"     "$launchd_backup_output${LF}$launchd_output"
    run "$1" "$2 murex --backup $env_input"       "$murex_backup_output${LF}$murex_output"
    run "$1" "$2 nu --backup $env_input"          "$nu_backup_output${LF}$nu_output"
    run "$1" "$2 nushell --backup $env_input"     "$nu_backup_output${LF}$nu_output"
    run "$1" "$2 pwsh --backup $env_input"        "$pwsh_backup_output${LF}$pwsh_output"
    run "$1" "$2 powershell --backup $env_input"  "$pwsh_backup_output${LF}$pwsh_output"
    run "$1" "$2 xonsh --backup $env_input"       "$xonsh_prefix${LF}$xonsh_backup_output${LF}$xonsh_output${LF}$xonsh_suffix"
    run "$1" "$2 systemd --backup $env_input"     "$env_backup_output${LF}$env_output"
    run "$1" "$2 env --backup $env_input"         "$env_backup_output${LF}$env_output"
    run "$1" "$2 json --backup $env_input"        "$json_backup_output"
    run "$1" "$2 $(fmt '') --backup $env_input"   "$format_backup_output${LF}$format_output"
    run "$1" "$2 $(fmt ▶) --backup $env_input"    "▶${LF}$format_backup_output${LF}$format_output"
    run "$1" "$2 $(fmt '' ◼) --backup $env_input" "$format_backup_output${LF}$format_output${LF}◼"
    run "$1" "$2 $(fmt ▶ ◼) --backup $env_input"  "▶${LF}$format_backup_output${LF}$format_output${LF}◼"

    run "$1" "$2 ash --local $env_input"         ''
    run "$1" "$2 bash --local $env_input"        ''
    run "$1" "$2 dash --local $env_input"        ''
    run "$1" "$2 ksh --local $env_input"         ''
    run "$1" "$2 pdksh --local $env_input"       ''
    run "$1" "$2 posix --local $env_input"       ''
    run "$1" "$2 sh --local $env_input"          ''
    run "$1" "$2 zsh --local $env_input"         ''
    run "$1" "$2 clink --local $env_input"       "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
    run "$1" "$2 cmd --local $env_input"         "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
    run "$1" "$2 command --local $env_input"     "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
    run "$1" "$2 csh --local $env_input"         ''
    run "$1" "$2 tcsh --local $env_input"        ''
    run "$1" "$2 elvish --local $env_input"      ''
    run "$1" "$2 fish --local $env_input"        ''
    run "$1" "$2 ion --local $env_input"         ''
    run "$1" "$2 launchd --local $env_input"     ''
    run "$1" "$2 murex --local $env_input"       ''
    run "$1" "$2 nu --local $env_input"          ''
    run "$1" "$2 nushell --local $env_input"     ''
    run "$1" "$2 pwsh --local $env_input"        ''
    run "$1" "$2 powershell --local $env_input"  ''
    run "$1" "$2 xonsh --local $env_input"       "$xonsh_prefix${LF}${LF}$xonsh_suffix"
    run "$1" "$2 systemd --local $env_input"     ''
    run "$1" "$2 env --local $env_input"         ''
    run "$1" "$2 json --local $env_input"        '{}'
    run "$1" "$2 $(fmt '') --local $env_input"   ''
    run "$1" "$2 $(fmt ▶) --local $env_input"    "▶${LF}"
    run "$1" "$2 $(fmt '' ◼) --local $env_input" "${LF}◼"
    run "$1" "$2 $(fmt ▶ ◼) --local $env_input"  "▶${LF}${LF}◼"

    run "$1" "$2 ash --local --backup $env_input"         ''
    run "$1" "$2 bash --local --backup $env_input"        ''
    run "$1" "$2 dash --local --backup $env_input"        ''
    run "$1" "$2 ksh --local --backup $env_input"         ''
    run "$1" "$2 pdksh --local --backup $env_input"       ''
    run "$1" "$2 posix --local --backup $env_input"       ''
    run "$1" "$2 sh --local --backup $env_input"          ''
    run "$1" "$2 zsh --local --backup $env_input"         ''
    run "$1" "$2 clink --local --backup $env_input"       "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
    run "$1" "$2 cmd --local --backup $env_input"         "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
    run "$1" "$2 command --local --backup $env_input"     "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
    run "$1" "$2 csh --local --backup $env_input"         ''
    run "$1" "$2 tcsh --local --backup $env_input"        ''
    run "$1" "$2 elvish --local --backup $env_input"      ''
    run "$1" "$2 fish --local --backup $env_input"        ''
    run "$1" "$2 ion --local --backup $env_input"         ''
    run "$1" "$2 launchd --local --backup $env_input"     ''
    run "$1" "$2 murex --local --backup $env_input"       ''
    run "$1" "$2 nu --local --backup $env_input"          ''
    run "$1" "$2 nushell --local --backup $env_input"     ''
    run "$1" "$2 pwsh --local --backup $env_input"        ''
    run "$1" "$2 powershell --local --backup $env_input"  ''
    run "$1" "$2 xonsh --local --backup $env_input"       "$xonsh_prefix${LF}${LF}$xonsh_suffix"
    run "$1" "$2 systemd --local --backup $env_input"     ''
    run "$1" "$2 env --local --backup $env_input"         ''
    run "$1" "$2 json --local --backup $env_input"        '{}'
    run "$1" "$2 $(fmt '') --local --backup $env_input"   ''
    run "$1" "$2 $(fmt ▶) --local --backup $env_input"    "▶${LF}"
    run "$1" "$2 $(fmt '' ◼) --local --backup $env_input" "${LF}◼"
    run "$1" "$2 $(fmt ▶ ◼) --local --backup $env_input"  "▶${LF}${LF}◼"

    run "$1" "$2 ash $posix_input"         "$posix_output"
    run "$1" "$2 bash $posix_input"        "$posix_output"
    run "$1" "$2 dash $posix_input"        "$posix_output"
    run "$1" "$2 ksh $posix_input"         "$posix_output"
    run "$1" "$2 pdksh $posix_input"       "$posix_output"
    run "$1" "$2 posix $posix_input"       "$posix_output"
    run "$1" "$2 sh $posix_input"          "$posix_output"
    run "$1" "$2 zsh $posix_input"         "$posix_output"
    run "$1" "$2 clink $posix_input"       "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 cmd $posix_input"         "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 command $posix_input"     "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 csh $posix_input"         "$csh_output"
    run "$1" "$2 tcsh $posix_input"        "$csh_output"
    run "$1" "$2 elvish $posix_input"      "$elvish_output"
    run "$1" "$2 fish $posix_input"        "$fish_output"
    run "$1" "$2 ion $posix_input"         "$ion_output"
    run "$1" "$2 launchd $posix_input"     "$launchd_output"
    run "$1" "$2 murex $posix_input"       "$murex_output"
    run "$1" "$2 nu $posix_input"          "$nu_output"
    run "$1" "$2 nushell $posix_input"     "$nu_output"
    run "$1" "$2 pwsh $posix_input"        "$pwsh_output"
    run "$1" "$2 powershell $posix_input"  "$pwsh_output"
    run "$1" "$2 xonsh $posix_input"       "$xonsh_prefix${LF}$xonsh_output${LF}$xonsh_suffix"
    run "$1" "$2 systemd $posix_input"     "$env_output"
    run "$1" "$2 env $posix_input"         "$env_output"
    run "$1" "$2 json $posix_input"        "$json_output"
    run "$1" "$2 $(fmt '') $posix_input"   "$format_output"
    run "$1" "$2 $(fmt ▶) $posix_input"    "▶${LF}$format_output"
    run "$1" "$2 $(fmt '' ◼) $posix_input" "$format_output${LF}◼"
    run "$1" "$2 $(fmt ▶ ◼) $posix_input"  "▶${LF}$format_output${LF}◼"

    run "$1" "$2 ash --backup $posix_input"         "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 bash --backup $posix_input"        "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 dash --backup $posix_input"        "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 ksh --backup $posix_input"         "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 pdksh --backup $posix_input"       "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 posix --backup $posix_input"       "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 sh --backup $posix_input"          "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 zsh --backup $posix_input"         "$posix_backup_output${LF}$posix_output"
    run "$1" "$2 clink --backup $posix_input"       "$cmd_output_prefix${LF}$cmd_backup_output${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 cmd --backup $posix_input"         "$cmd_output_prefix${LF}$cmd_backup_output${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 command --backup $posix_input"     "$cmd_output_prefix${LF}$cmd_backup_output${LF}$cmd_output${LF}$cmd_output_suffix"
    run "$1" "$2 csh --backup $posix_input"         "$csh_backup_output${LF}$csh_output"
    run "$1" "$2 tcsh --backup $posix_input"        "$csh_backup_output${LF}$csh_output"
    run "$1" "$2 elvish --backup $posix_input"      "$elvish_backup_output${LF}$elvish_output"
    run "$1" "$2 fish --backup $posix_input"        "$fish_backup_output${LF}$fish_output"
    run "$1" "$2 ion --backup $posix_input"         "$ion_backup_output${LF}$ion_output"
    run "$1" "$2 launchd --backup $posix_input"     "$launchd_backup_output${LF}$launchd_output"
    run "$1" "$2 murex --backup $posix_input"       "$murex_backup_output${LF}$murex_output"
    run "$1" "$2 nu --backup $posix_input"          "$nu_backup_output${LF}$nu_output"
    run "$1" "$2 nushell --backup $posix_input"     "$nu_backup_output${LF}$nu_output"
    run "$1" "$2 pwsh --backup $posix_input"        "$pwsh_backup_output${LF}$pwsh_output"
    run "$1" "$2 powershell --backup $posix_input"  "$pwsh_backup_output${LF}$pwsh_output"
    run "$1" "$2 xonsh --backup $posix_input"       "$xonsh_prefix${LF}$xonsh_backup_output${LF}$xonsh_output${LF}$xonsh_suffix"
    run "$1" "$2 systemd --backup $posix_input"     "$env_backup_output${LF}$env_output"
    run "$1" "$2 env --backup $posix_input"         "$env_backup_output${LF}$env_output"
    run "$1" "$2 json --backup $posix_input"        "$json_backup_output"
    run "$1" "$2 $(fmt '') --backup $posix_input"   "$format_backup_output${LF}$format_output"
    run "$1" "$2 $(fmt ▶) --backup $posix_input"    "▶${LF}$format_backup_output${LF}$format_output"
    run "$1" "$2 $(fmt '' ◼) --backup $posix_input" "$format_backup_output${LF}$format_output${LF}◼"
    run "$1" "$2 $(fmt ▶ ◼) --backup $posix_input"  "▶${LF}$format_backup_output${LF}$format_output${LF}◼"
}

start

run_posix_tests  './srcenv'
run_output_tests './srcenv'

detect() { command -v "$1" > /dev/null && echo 1; }
escape() { printf "'%s'\\n" "$(printf '%s' "$1" | sed -e "s/'/'\\\\''/g")"; }
script() {
    # shellcheck disable=SC2059
    escape "$(printf "$@" ${SRCENV_JQ_BINARY:+-b})"
}

sh=$(detect sh) || msg warn 'sh not found; skipping tests...'
run_posix_tests "$sh" "sh srcenv"
run "$sh" "sh -c $(script "$posix_script"         "sh $env_input"            )" "$json_output"
run "$sh" "sh -c $(script "$posix_script"         "sh $posix_input"          )" "$json_output"
run "$sh" "sh -c $(script "$posix_script"         "sh $path_input"           )" "$(when "$sh" sh -c "$json_path_output_cmd")"
run "$sh" "sh -c $(script "$posix_script"         "sh '$dir_path_input'"     )" "$(when "$sh" cd "${dir_path_input%/*}" && sh -c "$json_path_output_cmd")"
run "$sh" "sh -c $(script "$posix_init_script"    'sh' "$env_input"          )" "$json_backup_output"
run "$sh" "sh -c $(script "$posix_init_script"    'sh' "$posix_input"        )" "$json_backup_output"
run "$sh" "sh -c $(script "$posix_init_script"    'sh' "$path_input"         )" "$(when "$sh" sh -c "$json_path_backup_output_cmd")"
run "$sh" "sh -c $(script "$posix_init_script"    'sh' "'$dir_path_input'"   )" "$(when "$sh" cd "${dir_path_input%/*}" && sh -c "$json_path_backup_output_cmd")"
run "$sh" "sh -c $(script "$posix_restore_script" "sh $env_input"        'sh')" '{}'
run "$sh" "sh -c $(script "$posix_restore_script" "sh $posix_input"      'sh')" '{}'
run "$sh" "sh -c $(script "$posix_restore_script" "sh $path_input"       'sh')" '{}'
run "$sh" "sh -c $(script "$posix_restore_script" "sh '$dir_path_input'" 'sh')" '{}'

ash=$(detect ash) || msg warn 'Ash not found; skipping tests...'
run_posix_tests "$ash" "ash srcenv"
run "$ash" "ash -c $(script "$posix_script"         "ash $env_input"             )" "$json_output"
run "$ash" "ash -c $(script "$posix_script"         "ash $posix_input"           )" "$json_output"
run "$ash" "ash -c $(script "$posix_script"         "ash $path_input"            )" "$(when "$ash" ash -c "$json_path_output_cmd")"
run "$ash" "ash -c $(script "$posix_script"         "ash '$dir_path_input'"      )" "$(when "$ash" cd "${dir_path_input%/*}" && ash -c "$json_path_output_cmd")"
run "$ash" "ash -c $(script "$posix_init_script"    'ash' "$env_input"           )" "$json_backup_output"
run "$ash" "ash -c $(script "$posix_init_script"    'ash' "$posix_input"         )" "$json_backup_output"
run "$ash" "ash -c $(script "$posix_init_script"    'ash' "$path_input"          )" "$(when "$ash" ash -c "$json_path_backup_output_cmd")"
run "$ash" "ash -c $(script "$posix_init_script"    'ash' "'$dir_path_input'"    )" "$(when "$ash" cd "${dir_path_input%/*}" && ash -c "$json_path_backup_output_cmd")"
run "$ash" "ash -c $(script "$posix_restore_script" "ash $env_input"        'ash')" '{}'
run "$ash" "ash -c $(script "$posix_restore_script" "ash $posix_input"      'ash')" '{}'
run "$ash" "ash -c $(script "$posix_restore_script" "ash $path_input"       'ash')" '{}'
run "$ash" "ash -c $(script "$posix_restore_script" "ash '$dir_path_input'" 'ash')" '{}'

bash=$(detect bash) || msg warn 'Bash not found; skipping tests...'
auto='$PROMPT_COMMAND'; clean='unset PROMPT_COMMAND'
run_posix_tests "$bash" "bash srcenv"
run "$bash" "bash -c $(script "$posix_auto_script"    'bash' "$auto" "$clean"        )" "$json_auto_output"
run "$bash" "bash -c $(script "$posix_script"         "bash $env_input"              )" "$json_output"
run "$bash" "bash -c $(script "$posix_script"         "bash $posix_input"            )" "$json_output"
run "$bash" "bash -c $(script "$posix_script"         "bash $path_input"             )" "$(when "$bash" bash -c "$json_path_output_cmd")"
run "$bash" "bash -c $(script "$posix_script"         "bash '$dir_path_input'"       )" "$(when "$bash" cd "${dir_path_input%/*}" && bash -c "$json_path_output_cmd")"
run "$bash" "bash -c $(script "$posix_init_script"    'bash' "$env_input"            )" "$json_backup_output"
run "$bash" "bash -c $(script "$posix_init_script"    'bash' "$posix_input"          )" "$json_backup_output"
run "$bash" "bash -c $(script "$posix_init_script"    'bash' "$path_input"           )" "$(when "$bash" bash -c "$json_path_backup_output_cmd")"
run "$bash" "bash -c $(script "$posix_init_script"    'bash' "'$dir_path_input'"     )" "$(when "$bash" cd "${dir_path_input%/*}" && bash -c "$json_path_backup_output_cmd")"
run "$bash" "bash -c $(script "$posix_restore_script" "bash $env_input"        'bash')" '{}'
run "$bash" "bash -c $(script "$posix_restore_script" "bash $posix_input"      'bash')" '{}'
run "$bash" "bash -c $(script "$posix_restore_script" "bash $path_input"       'bash')" '{}'
run "$bash" "bash -c $(script "$posix_restore_script" "bash '$dir_path_input'" 'bash')" '{}'

dash=$(detect dash) || msg warn 'Dash not found; skipping tests...'
run_posix_tests "$dash" "dash srcenv"
run "$dash" "dash -c $(script "$posix_script"         "dash $env_input"              )" "$json_output"
run "$dash" "dash -c $(script "$posix_script"         "dash $posix_input"            )" "$json_output"
run "$dash" "dash -c $(script "$posix_script"         "dash $path_input"             )" "$(when "$dash" dash -c "$json_path_output_cmd")"
run "$dash" "dash -c $(script "$posix_script"         "dash '$dir_path_input'"       )" "$(when "$dash" cd "${dir_path_input%/*}" && dash -c "$json_path_output_cmd")"
run "$dash" "dash -c $(script "$posix_init_script"    'dash' "$env_input"            )" "$json_backup_output"
run "$dash" "dash -c $(script "$posix_init_script"    'dash' "$posix_input"          )" "$json_backup_output"
run "$dash" "dash -c $(script "$posix_init_script"    'dash' "$path_input"           )" "$(when "$dash" dash -c "$json_path_backup_output_cmd")"
run "$dash" "dash -c $(script "$posix_init_script"    'dash' "'$dir_path_input'"     )" "$(when "$dash" cd "${dir_path_input%/*}" && dash -c "$json_path_backup_output_cmd")"
run "$dash" "dash -c $(script "$posix_restore_script" "dash $env_input"        'dash')" '{}'
run "$dash" "dash -c $(script "$posix_restore_script" "dash $posix_input"      'dash')" '{}'
run "$dash" "dash -c $(script "$posix_restore_script" "dash $path_input"       'dash')" '{}'
run "$dash" "dash -c $(script "$posix_restore_script" "dash '$dir_path_input'" 'dash')" '{}'

ksh=$(detect ksh) || msg warn 'Ksh not found; skipping tests...'
run_posix_tests "$ksh" "ksh srcenv"
run "$ksh" "ksh -c $(script "$posix_script"         "ksh $env_input"             )" "$json_output"
run "$ksh" "ksh -c $(script "$posix_script"         "ksh $posix_input"           )" "$json_output"
run "$ksh" "ksh -c $(script "$posix_script"         "ksh $path_input"            )" "$(when "$ksh" ksh -c "$json_path_output_cmd")"
run "$ksh" "ksh -c $(script "$posix_script"         "ksh '$dir_path_input'"      )" "$(when "$ksh" cd "${dir_path_input%/*}" && ksh -c "$json_path_output_cmd")"
run "$ksh" "ksh -c $(script "$posix_init_script"    'ksh' "$env_input"           )" "$json_backup_output"
run "$ksh" "ksh -c $(script "$posix_init_script"    'ksh' "$posix_input"         )" "$json_backup_output"
run "$ksh" "ksh -c $(script "$posix_init_script"    'ksh' "$path_input"          )" "$(when "$ksh" ksh -c "$json_path_backup_output_cmd")"
run "$ksh" "ksh -c $(script "$posix_init_script"    'ksh' "'$dir_path_input'"    )" "$(when "$ksh" cd "${dir_path_input%/*}" && ksh -c "$json_path_backup_output_cmd")"
run "$ksh" "ksh -c $(script "$posix_restore_script" "ksh $env_input"        'ksh')" '{}'
run "$ksh" "ksh -c $(script "$posix_restore_script" "ksh $posix_input"      'ksh')" '{}'
run "$ksh" "ksh -c $(script "$posix_restore_script" "ksh $path_input"       'ksh')" '{}'
run "$ksh" "ksh -c $(script "$posix_restore_script" "ksh '$dir_path_input'" 'ksh')" '{}'

mksh=$(detect mksh) || msg warn 'Mksh not found; skipping tests...'
run_posix_tests "$mksh" "mksh srcenv"
run "$mksh" "mksh -c $(script "$posix_script"         "mksh $env_input"              )" "$json_output"
run "$mksh" "mksh -c $(script "$posix_script"         "mksh $posix_input"            )" "$json_output"
run "$mksh" "mksh -c $(script "$posix_script"         "mksh $path_input"             )" "$(when "$mksh" mksh -c "$json_path_output_cmd")"
run "$mksh" "mksh -c $(script "$posix_script"         "mksh '$dir_path_input'"       )" "$(when "$mksh" cd "${dir_path_input%/*}" && mksh -c "$json_path_output_cmd")"
run "$mksh" "mksh -c $(script "$posix_init_script"    'mksh' "$env_input"            )" "$json_backup_output"
run "$mksh" "mksh -c $(script "$posix_init_script"    'mksh' "$posix_input"          )" "$json_backup_output"
run "$mksh" "mksh -c $(script "$posix_init_script"    'mksh' "$path_input"           )" "$(when "$mksh" mksh -c "$json_path_backup_output_cmd")"
run "$mksh" "mksh -c $(script "$posix_init_script"    'mksh' "'$dir_path_input'"     )" "$(when "$mksh" cd "${dir_path_input%/*}" && mksh -c "$json_path_backup_output_cmd")"
run "$mksh" "mksh -c $(script "$posix_restore_script" "mksh $env_input"        'mksh')" '{}'
run "$mksh" "mksh -c $(script "$posix_restore_script" "mksh $posix_input"      'mksh')" '{}'
run "$mksh" "mksh -c $(script "$posix_restore_script" "mksh $path_input"       'mksh')" '{}'
run "$mksh" "mksh -c $(script "$posix_restore_script" "mksh '$dir_path_input'" 'mksh')" '{}'

zsh=$(detect zsh) || msg warn 'Zsh not found; skipping tests...'
run_posix_tests "$zsh" "zsh srcenv"
run "$zsh" "zsh -c $(script "$posix_script"         "zsh $env_input"             )" "$json_output"
run "$zsh" "zsh -c $(script "$posix_script"         "zsh $posix_input"           )" "$json_output"
run "$zsh" "zsh -c $(script "$posix_script"         "zsh $path_input"            )" "$(when "$zsh" zsh -c "$json_path_output_cmd")"
run "$zsh" "zsh -c $(script "$posix_script"         "zsh '$dir_path_input'"      )" "$(when "$zsh" cd "${dir_path_input%/*}" && zsh -c "$json_path_output_cmd")"
run "$zsh" "zsh -c $(script "$posix_init_script"    'zsh' "$env_input"           )" "$json_backup_output"
run "$zsh" "zsh -c $(script "$posix_init_script"    'zsh' "$posix_input"         )" "$json_backup_output"
run "$zsh" "zsh -c $(script "$posix_init_script"    'zsh' "$path_input"          )" "$(when "$zsh" zsh -c "$json_path_backup_output_cmd")"
run "$zsh" "zsh -c $(script "$posix_init_script"    'zsh' "'$dir_path_input'"    )" "$(when "$zsh" cd "${dir_path_input%/*}" && zsh -c "$json_path_backup_output_cmd")"
run "$zsh" "zsh -c $(script "$posix_restore_script" "zsh $env_input"        'zsh')" '{}'
run "$zsh" "zsh -c $(script "$posix_restore_script" "zsh $posix_input"      'zsh')" '{}'
run "$zsh" "zsh -c $(script "$posix_restore_script" "zsh $path_input"       'zsh')" '{}'
run "$zsh" "zsh -c $(script "$posix_restore_script" "zsh '$dir_path_input'" 'zsh')" '{}'

csh=$(detect csh) || msg warn 'Csh not found; skipping tests...'
run "$csh" "csh -c $(script "$csh_script"         "csh $env_input"             )" "$json_output"
run "$csh" "csh -c $(script "$csh_script"         "csh $posix_input"           )" "$json_output"
run "$csh" "csh -c $(script "$csh_script"         "csh $path_input"            )" "$(when "$csh" csh -c "$json_path_output_cmd")"
run "$csh" "csh -c $(script "$csh_script"         "csh '$dir_path_input'"      )" "$(when "$csh" cd "${dir_path_input%/*}" && csh -c "$json_path_output_cmd")"
run "$csh" "csh -c $(script "$csh_init_script"    'csh' "$env_input"           )" "$json_backup_output"
run "$csh" "csh -c $(script "$csh_init_script"    'csh' "$posix_input"         )" "$json_backup_output"
run "$csh" "csh -c $(script "$csh_init_script"    'csh' "$path_input"          )" "$(when "$csh" csh -c "$json_path_backup_output_cmd")"
run "$csh" "csh -c $(script "$csh_init_script"    'csh' "'$dir_path_input'"    )" "$(when "$csh" cd "${dir_path_input%/*}" && csh -c "$json_path_backup_output_cmd")"
run "$csh" "csh -c $(script "$csh_restore_script" "csh $env_input"        'csh')" '{}'
run "$csh" "csh -c $(script "$csh_restore_script" "csh $posix_input"      'csh')" '{}'
run "$csh" "csh -c $(script "$csh_restore_script" "csh $path_input"       'csh')" '{}'
run "$csh" "csh -c $(script "$csh_restore_script" "csh '$dir_path_input'" 'csh')" '{}'

tcsh=$(detect tcsh) || msg warn 'Tcsh not found; skipping tests...'
run "$tcsh" "tcsh -c $(script "$csh_script"         "tcsh $env_input"              )" "$json_output"
run "$tcsh" "tcsh -c $(script "$csh_script"         "tcsh $posix_input"            )" "$json_output"
run "$tcsh" "tcsh -c $(script "$csh_script"         "tcsh $path_input"             )" "$(when "$tcsh" tcsh -c "$json_path_output_cmd")"
run "$tcsh" "tcsh -c $(script "$csh_script"         "tcsh '$dir_path_input'"       )" "$(when "$tcsh" cd "${dir_path_input%/*}" && tcsh -c "$json_path_output_cmd")"
run "$tcsh" "tcsh -c $(script "$csh_init_script"    'tcsh' "$env_input"            )" "$json_backup_output"
run "$tcsh" "tcsh -c $(script "$csh_init_script"    'tcsh' "$posix_input"          )" "$json_backup_output"
run "$tcsh" "tcsh -c $(script "$csh_init_script"    'tcsh' "$path_input"           )" "$(when "$tcsh" tcsh -c "$json_path_backup_output_cmd")"
run "$tcsh" "tcsh -c $(script "$csh_init_script"    'tcsh' "'$dir_path_input'"     )" "$(when "$tcsh" cd "${dir_path_input%/*}" && tcsh -c "$json_path_backup_output_cmd")"
run "$tcsh" "tcsh -c $(script "$csh_restore_script" "tcsh $env_input"        'tcsh')" '{}'
run "$tcsh" "tcsh -c $(script "$csh_restore_script" "tcsh $posix_input"      'tcsh')" '{}'
run "$tcsh" "tcsh -c $(script "$csh_restore_script" "tcsh $path_input"       'tcsh')" '{}'
run "$tcsh" "tcsh -c $(script "$csh_restore_script" "tcsh '$dir_path_input'" 'tcsh')" '{}'

elvish=$(detect elvish) || msg warn 'Elvish not found; skipping tests...'
run "$elvish" "elvish -c $(script "$elvish_script"         "elvish $env_input"                )" "$json_output"
run "$elvish" "elvish -c $(script "$elvish_script"         "elvish $posix_input"              )" "$json_output"
run "$elvish" "elvish -c $(script "$elvish_script"         "elvish $path_input"               )" "$(when "$elvish" elvish -c "$json_path_output_cmd")"
run "$elvish" "elvish -c $(script "$elvish_script"         "elvish '$dir_path_input'"         )" "$(when "$elvish" cd "${dir_path_input%/*}" && elvish -c "$json_path_output_cmd")"
run "$elvish" "elvish -c $(script "$elvish_init_script"    'elvish' "$env_input"              )" "$json_backup_output"
run "$elvish" "elvish -c $(script "$elvish_init_script"    'elvish' "$posix_input"            )" "$json_backup_output"
run "$elvish" "elvish -c $(script "$elvish_init_script"    'elvish' "$path_input"             )" "$(when "$elvish" elvish -c "$json_path_backup_output_cmd")"
run "$elvish" "elvish -c $(script "$elvish_init_script"    'elvish' "'$dir_path_input'"       )" "$(when "$elvish" cd "${dir_path_input%/*}" && elvish -c "$json_path_backup_output_cmd")"
run "$elvish" "elvish -c $(script "$elvish_restore_script" "elvish $env_input"        'elvish')" '{}'
run "$elvish" "elvish -c $(script "$elvish_restore_script" "elvish $posix_input"      'elvish')" '{}'
run "$elvish" "elvish -c $(script "$elvish_restore_script" "elvish $path_input"       'elvish')" '{}'
run "$elvish" "elvish -c $(script "$elvish_restore_script" "elvish '$dir_path_input'" 'elvish')" '{}'

fish=$(detect fish) || msg warn 'Fish not found; skipping tests...'
run "$fish" "fish -c $(script "$fish_script"         "fish $env_input"              )" "$json_output"
run "$fish" "fish -c $(script "$fish_script"         "fish $posix_input"            )" "$json_output"
run "$fish" "fish -c $(script "$fish_script"         "fish $path_input"             )" "$(when "$fish" fish -c "$json_path_output_cmd")"
run "$fish" "fish -c $(script "$fish_script"         "fish '$dir_path_input'"       )" "$(when "$fish" cd "${dir_path_input%/*}" && fish -c "$json_path_output_cmd")"
run "$fish" "fish -c $(script "$fish_init_script"    'fish' "$env_input"            )" "$json_backup_output"
run "$fish" "fish -c $(script "$fish_init_script"    'fish' "$posix_input"          )" "$json_backup_output"
run "$fish" "fish -c $(script "$fish_init_script"    'fish' "$path_input"           )" "$(when "$fish" fish -c "$json_path_backup_output_cmd")"
run "$fish" "fish -c $(script "$fish_init_script"    'fish' "'$dir_path_input'"     )" "$(when "$fish" cd "${dir_path_input%/*}" && fish -c "$json_path_backup_output_cmd")"
run "$fish" "fish -c $(script "$fish_restore_script" "fish $env_input"        'fish')" '{}'
run "$fish" "fish -c $(script "$fish_restore_script" "fish $posix_input"      'fish')" '{}'
run "$fish" "fish -c $(script "$fish_restore_script" "fish $path_input"       'fish')" '{}'
run "$fish" "fish -c $(script "$fish_restore_script" "fish '$dir_path_input'" 'fish')" '{}'

ion=$(detect ion) || msg warn 'ion not found; skipping tests...'
run "$ion" "ion -c $(script "$ion_script"         "ion $env_input"              )" "$json_output"
run "$ion" "ion -c $(script "$ion_script"         "ion $posix_input"            )" "$json_output"
run "$ion" "ion -c $(script "$ion_script"         "ion $path_input"             )" "$(when "$ion" ion -c "$json_path_output_cmd")"
run "$ion" "ion -c $(script "$ion_script"         "ion '$dir_path_input'"       )" "$(when "$ion" cd "${dir_path_input%/*}" && ion -c "$json_path_output_cmd")"
run "$ion" "ion -c $(script "$ion_init_script"    'ion' "$env_input"            )" "$json_backup_output"
run "$ion" "ion -c $(script "$ion_init_script"    'ion' "$posix_input"          )" "$json_backup_output"
run "$ion" "ion -c $(script "$ion_init_script"    'ion' "$path_input"           )" "$(when "$ion" ion -c "$json_path_backup_output_cmd")"
run "$ion" "ion -c $(script "$ion_init_script"    'ion' "'$dir_path_input'"     )" "$(when "$ion" cd "${dir_path_input%/*}" && ion -c "$json_path_backup_output_cmd")"
run "$ion" "ion -c $(script "$ion_restore_script" "ion $env_input"        'ion')" "$json_restore_empty_output"
run "$ion" "ion -c $(script "$ion_restore_script" "ion $posix_input"      'ion')" "$json_restore_empty_output"
run "$ion" "ion -c $(script "$ion_restore_script" "ion $path_input"       'ion')" "{${LF}  \"SRCENV_RESTORE\": \"\"${LF}}"
run "$ion" "ion -c $(script "$ion_restore_script" "ion '$dir_path_input'" 'ion')" "{${LF}  \"SRCENV_RESTORE\": \"\"${LF}}"

murex=$(detect murex) || msg warn 'Murex not found; skipping tests...'
run "$murex" "murex -c $(script "$murex_script"         "murex $env_input"               )" "$json_output"
run "$murex" "murex -c $(script "$murex_script"         "murex $posix_input"             )" "$json_output"
run "$murex" "murex -c $(script "$murex_script"         "murex $path_input"              )" "$(when "$murex" murex -c "$json_path_output_cmd")"
run "$murex" "murex -c $(script "$murex_script"         "murex '$dir_path_input'"        )" "$(when "$murex" cd "${dir_path_input%/*}" && murex -c "$json_path_output_cmd")"
run "$murex" "murex -c $(script "$murex_init_script"    'murex' "$env_input"             )" "$json_backup_output"
run "$murex" "murex -c $(script "$murex_init_script"    'murex' "$posix_input"           )" "$json_backup_output"
run "$murex" "murex -c $(script "$murex_init_script"    'murex' "$path_input"            )" "$(when "$murex" murex -c "$json_path_backup_output_cmd")"
run "$murex" "murex -c $(script "$murex_init_script"    'murex' "'$dir_path_input'"      )" "$(when "$murex" cd "${dir_path_input%/*}" && murex -c "$json_path_backup_output_cmd")"
run "$murex" "murex -c $(script "$murex_restore_script" "murex $env_input"        'murex')" '{}'
run "$murex" "murex -c $(script "$murex_restore_script" "murex $posix_input"      'murex')" '{}'
run "$murex" "murex -c $(script "$murex_restore_script" "murex $path_input"       'murex')" '{}'
run "$murex" "murex -c $(script "$murex_restore_script" "murex '$dir_path_input'" 'murex')" '{}'

nu=$(detect nu) || msg warn 'Nushell not found; skipping tests...'
run "$nu" "nu -c $(script "$nu_setup_script"   "nu $env_input"       ); nu -c $(script "$nu_script"                         )" "$json_output"
run "$nu" "nu -c $(script "$nu_setup_script"   "nu $posix_input"     ); nu -c $(script "$nu_script"                         )" "$json_output"
run "$nu" "nu -c $(script "$nu_setup_script"   "nu $path_input"      ); nu -c $(script "$nu_script"                         )" "$(when "$nu" nu -c "$json_path_output_cmd")"
run "$nu" "nu -c $(script "$nu_setup_script"   "nu '$dir_path_input'"); nu -c $(script "$nu_script"                         )" "$(when "$nu" cd "${dir_path_input%/*}" && nu -c "$json_path_output_cmd")"
run "$nu" "nu -c $(script "$nu_setup_script"   'init nu'             ); nu -c $(script "$nu_init_script" "$env_input"       )" "$json_backup_output"
run "$nu" "nu -c $(script "$nu_setup_script"   'init nu'             ); nu -c $(script "$nu_init_script" "$posix_input"     )" "$json_backup_output"
run "$nu" "nu -c $(script "$nu_setup_script"   'init nu'             ); nu -c $(script "$nu_init_script" "$path_input"      )" "$(when "$nu" nu -c "$json_path_backup_output_cmd")"
run "$nu" "nu -c $(script "$nu_setup_script"   'init nu'             ); nu -c $(script "$nu_init_script" "'$dir_path_input'")" "$(when "$nu" cd "${dir_path_input%/*}" && nu -c "$json_path_backup_output_cmd")"
run "$nu" "nu -c $(script "$nu_json_script"    "json $env_input"              )" "$json_output"
run "$nu" "nu -c $(script "$nu_json_script"    "json $posix_input"            )" "$json_output"
run "$nu" "nu -c $(script "$nu_json_script"    "json $path_input"             )" "$(when "$nu" nu -c "$json_path_output_cmd")"
run "$nu" "nu -c $(script "$nu_json_script"    "json '$dir_path_input'"       )" "$(when "$nu" cd "${dir_path_input%/*}" && nu -c "$json_path_output_cmd")"
run "$nu" "nu -c $(script "$nu_restore_script" "json $env_input"        'json')" '{}'
run "$nu" "nu -c $(script "$nu_restore_script" "json $posix_input"      'json')" '{}'
run "$nu" "nu -c $(script "$nu_restore_script" "json $path_input"       'json')" '{}'
run "$nu" "nu -c $(script "$nu_restore_script" "json '$dir_path_input'" 'json')" '{}'

pwsh=$(detect pwsh) || msg warn 'PowerShell not found; skipping tests...'
run "$pwsh" "pwsh -c $(script "$pwsh_script"         "pwsh $env_input"                )" "$json_output"
run "$pwsh" "pwsh -c $(script "$pwsh_script"         "pwsh $posix_input"              )" "$json_output"
run "$pwsh" "pwsh -c $(script "$pwsh_script"         "pwsh $path_input"               )" "$(when "$pwsh" pwsh -c "$json_path_output_cmd")"
run "$pwsh" "pwsh -c $(script "$pwsh_script"         "pwsh \"$dir_path_input\""       )" "$(when "$pwsh" cd "${dir_path_input%/*}" && pwsh -c "$json_path_output_cmd")"
run "$pwsh" "pwsh -c $(script "$pwsh_init_script"    'pwsh' "$env_input"              )" "$json_backup_output"
run "$pwsh" "pwsh -c $(script "$pwsh_init_script"    'pwsh' "$posix_input"            )" "$json_backup_output"
run "$pwsh" "pwsh -c $(script "$pwsh_init_script"    'pwsh' "$path_input"             )" "$(when "$pwsh" pwsh -c "$json_path_backup_output_cmd")"
run "$pwsh" "pwsh -c $(script "$pwsh_init_script"    'pwsh' "\"$dir_path_input\""     )" "$(when "$pwsh" cd "${dir_path_input%/*}" && pwsh -c "$json_path_backup_output_cmd")"
run "$pwsh" "pwsh -c $(script "$pwsh_restore_script" "pwsh $env_input"          'pwsh')" '{}'
run "$pwsh" "pwsh -c $(script "$pwsh_restore_script" "pwsh $posix_input"        'pwsh')" '{}'
run "$pwsh" "pwsh -c $(script "$pwsh_restore_script" "pwsh $path_input"         'pwsh')" '{}'
run "$pwsh" "pwsh -c $(script "$pwsh_restore_script" "pwsh \"$dir_path_input\"" 'pwsh')" '{}'

powershell=$(detect powershell) || msg warn 'Windows PowerShell not found; skipping tests...'
when "$powershell" powershell -v > /dev/null 2> /dev/null && powershell= && msg warn 'PowerShell is not Windows PowerShell; skipping tests...'
run "$powershell" "powershell -c $(script "$powershell_script"         "powershell $env_input"                      )" "$json_output"
run "$powershell" "powershell -c $(script "$powershell_script"         "powershell $posix_input"                    )" "$json_output"
run "$powershell" "powershell -c $(script "$powershell_script"         "powershell $path_input"                     )" "$(when "$powershell" powershell -c "$(echo "$json_path_output_cmd" | sed -e s/\"/\"\"/g | sed -e s/\\\\/\\\\\\\\/g)")"
run "$powershell" "powershell -c $(script "$powershell_script"         "powershell \"$dir_path_input\""             )" "$(when "$powershell" cd "${dir_path_input%/*}" && powershell -c "$(echo "$json_path_output_cmd" | sed -e s/\"/\"\"/g | sed -e s/\\\\/\\\\\\\\/g)")"
run "$powershell" "powershell -c $(script "$powershell_init_script"    'powershell' "$env_input"                    )" "$json_backup_output"
run "$powershell" "powershell -c $(script "$powershell_init_script"    'powershell' "$posix_input"                  )" "$json_backup_output"
run "$powershell" "powershell -c $(script "$powershell_init_script"    'powershell' "$path_input"                   )" "$(when "$powershell" powershell -c "$(echo "$json_path_backup_output_cmd" | sed -e s/\"/\"\"/g | sed -e s/\\\\/\\\\\\\\/g)")"
run "$powershell" "powershell -c $(script "$powershell_init_script"    'powershell' "\"$dir_path_input\""           )" "$(when "$powershell" cd "${dir_path_input%/*}" && powershell -c "$(echo "$json_path_backup_output_cmd" | sed -e s/\"/\"\"/g | sed -e s/\\\\/\\\\\\\\/g)")"
run "$powershell" "powershell -c $(script "$powershell_restore_script" "powershell $env_input"          'powershell')" '{}'
run "$powershell" "powershell -c $(script "$powershell_restore_script" "powershell $posix_input"        'powershell')" '{}'
run "$powershell" "powershell -c $(script "$powershell_restore_script" "powershell $path_input"         'powershell')" '{}'
run "$powershell" "powershell -c $(script "$powershell_restore_script" "powershell \"$dir_path_input\"" 'powershell')" '{}'

# NOTE: Xonsh somehow runs srcenv in the background and ends up suspending the job because of tty output
#       'echo | xonsh -c' instead of 'xonsh -c' fixes this problem
xonsh=$(detect xonsh) || msg warn 'Xonsh not found; skipping tests...'
run "$xonsh" "echo | xonsh -c $(script "$xonsh_script"         "xonsh $env_input"              )" "$json_output"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_script"         "xonsh $posix_input"            )" "$json_output"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_script"         "xonsh $path_input"             )" "$(when "$xonsh" xonsh -c "$json_path_output_cmd")"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_script"         "xonsh '$dir_path_input'"       )" "$(when "$xonsh" cd "${dir_path_input%/*}" && xonsh -c "$json_path_output_cmd")"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_init_script"    'xonsh' "$env_input"            )" "$json_backup_output"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_init_script"    'xonsh' "$posix_input"          )" "$json_backup_output"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_init_script"    'xonsh' "$path_input"           )" "$(when "$xonsh" xonsh -c "$json_path_backup_output_cmd")"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_init_script"    'xonsh' "'$dir_path_input'"     )" "$(when "$xonsh" cd "${dir_path_input%/*}" && xonsh -c "$json_path_backup_output_cmd")"
run "$xonsh" "echo | xonsh -c $(script "$xonsh_restore_script" "xonsh $env_input"        'xonsh')" '{}'
run "$xonsh" "echo | xonsh -c $(script "$xonsh_restore_script" "xonsh $posix_input"      'xonsh')" '{}'
run "$xonsh" "echo | xonsh -c $(script "$xonsh_restore_script" "xonsh $path_input"       'xonsh')" '{}'
run "$xonsh" "echo | xonsh -c $(script "$xonsh_restore_script" "xonsh '$dir_path_input'" 'xonsh')" '{}'

# NOTE: Running cmd inside sh messes up the shell
#       • 'run' can only be used once afterwards
#       • 'run' must be the last command before 'end'
windows=$(detect cmd) || msg warn 'Windows Command shell not found; skipping tests...'

# shellcheck disable=SC2059
if [ "$windows" = 1 ]; then
    printf "$cmd_script"         "cmd $env_input"                "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >  test.cmd.output; rm -f test.cmd
    printf "$cmd_script"         "cmd $posix_input"              "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_script"         "cmd $path_input"               "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_script"         "cmd \"$dir_path_input\""       "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_init_script"    'cmd' 'src'                                               > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_restore_script" "cmd $env_input"          'cmd' "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_restore_script" "cmd $posix_input"        'cmd' "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_restore_script" "cmd $path_input"         'cmd' "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd
    printf "$cmd_restore_script" "cmd \"$dir_path_input\"" 'cmd' "${SRCENV_JQ_BINARY:+-b}" > test.cmd; cmd '/c test.cmd' >> test.cmd.output; rm -f test.cmd

    cmd_name=src
    cmd_temp=$(cmd '/c echo %TEMP%')
    cmd_temp="${cmd_temp%\"}\srcenv.$cmd_name.cmd"
    cmd_srcenv="'$PWD/space srcenv'"
    cmd_macro="$cmd_name=@echo off \$T sh $cmd_srcenv cmd --backup --restore --verbose --cmd $cmd_name \$* \$G $cmd_temp \$T\$T call $cmd_temp \$T del $cmd_temp \$T echo on$(printf '\r')"

    printf "@echo off\n\n$json_path_output_cmd\n" | sed -e s/\"/\"\"/g | sed -e s/\\\\/\\\\\\\\\\\\\\\\/g | sed -e s/\'/\"/g > test.cmd
    cp test.cmd "${dir_path_input%/*}/test.cmd"
    cmd '/c test.cmd' > test.cmd.json.path.output
    (cd "${dir_path_input%/*}" && cmd '/c test.cmd') > test.cmd.json.dir.path.output
    rm -f test.cmd "${dir_path_input%/*}/test.cmd"
fi

run "$windows" 'cat test.cmd.output' "$json_output${LF}$json_output${LF}$(when "$windows" cat test.cmd.json.path.output)${LF}$(when "$windows" cat test.cmd.json.dir.path.output)${LF}$cmd_macro${LF}{}${LF}{}${LF}{}${LF}{}"

if [ "$windows" = 1 ]; then
    rm -f test.cmd.output test.cmd.json.path.output test.cmd.json.dir.path.output
fi

end

# endregion Tests
