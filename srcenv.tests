#!/bin/sh
#
# srcenv.tests - Test suite for srcenv
#
# shellcheck disable=SC2016

# region Framework
#
# Usage: start
#        run [<skip>] <command> <expected output> [<expected exit code>]
#        msg [err|warn] <message>
#        end

tests_sequence=0
tests_skipped=0
tests_passed=0
tests_failed=0
tests_filter=

for filter in "$@"; do
    tests_filter="$tests_filter $filter "
done

NORMAL=$(tput sgr0 2> /dev/null || printf '\033[0m')
BOLD=$(tput bold 2> /dev/null || printf '\033[1m')
DIM=$(tput dim 2> /dev/null || printf '\033[2m')
RED=$(tput setaf 1 2> /dev/null || printf '\033[31m')
GREEN=$(tput setaf 2 2> /dev/null || printf '\033[32m')
YELLOW=$(tput setaf 3 2> /dev/null || printf '\033[33m')
DLM="$(printf '\032')"
LF='
'

start() { msg "Running..."; }

capture() {
    stdout="$( (printf "${DLM}%s${DLM}" "$(trap 'printf "${DLM}%d" "$?"' EXIT; "$@")" 1>&2) 2>&1 )"
    exitcode="${stdout%"${DLM}"}"
    exitcode="${exitcode##*"${DLM}"}"
    stderr="${stdout%%"${DLM}"*}"
    stderr="${stderr%"${LF}"}"
    stdout="${stdout#*"${DLM}"}"
    stdout="${stdout%"${DLM}"*"${DLM}"}"
    stdout="${stdout%"${LF}"}"

    return "$exitcode"
}

run() {
    id=$((tests_sequence + 1)); tests_sequence=$id

    case "$tests_filter" in
        *\ $id\ *) ;;
        '')        ;;
        *) return  ;;
    esac

    case "$1" in
        0|'') tests_skipped=$((tests_skipped + 1))
              msg test warn "$id" "${2%%"${LF}"*}" "" "${YELLOW}Skipped${NORMAL}"
              return ;;
        1)    shift  ;;
    esac

    cmd="$1"; capture eval "$cmd"
    cmd="${cmd%%"${LF}"*}"
    expected="$2"; expected_exitcode="${3:-0}" 

    if [ "$exitcode" != "$expected_exitcode" ]; then
        tests_failed=$((tests_failed + 1))
        msg test err "$id" "${cmd}: " "Exit code ${YELLOW}$exitcode${NORMAL} ${BOLD}${RED}!=${NORMAL} Exit code ${YELLOW}$expected_exitcode${NORMAL}"
    elif [ "$stdout" != "$expected" ]; then
        tests_failed=$((tests_failed + 1))
        msg test err "$id" "$cmd"
    else
        tests_passed=$((tests_passed + 1))
        msg test "$id" "$cmd"
    fi

    if [ -n "$stderr" ]; then
        if [ "$exitcode" = "0" ] || [ "$exitcode" = "$expected_exitcode" ]; then
            msg test out "$id" "${BOLD}${DIM}|${NORMAL} " "$stderr"
        else
            msg test err "$id" "${BOLD}${RED}|${NORMAL} " "$stderr"
        fi
    fi

    if [ "$stdout" != "$expected" ]; then
        msg test err "$id" "${BOLD}${RED}|${NORMAL} " "${BOLD}${RED}mismatch:${NORMAL} $stdout ${BOLD}${RED}!=${NORMAL} $expected"
    fi
}

end() {
    if [ $tests_failed -gt 0 ]; then
        msg err "$(printf "${GREEN}%s${NORMAL} tests passed, ${RED}%s${NORMAL} tests failed, ${YELLOW}%s${NORMAL} tests skipped\n" "$tests_passed" "$tests_failed" "$tests_skipped")"
        exit 1
    fi

    if [ $tests_skipped -gt 0 ]; then
        msg warn "$(printf "${GREEN}%s${NORMAL} tests passed, ${YELLOW}%s${NORMAL} tests skipped\n" "$tests_passed" "$tests_skipped")"
        exit 0
    fi

    msg "$(printf "${GREEN}%s${NORMAL} tests passed\n" "$tests_passed")"  
    exit 0
}

msg() {
    case "$1" in
        test) case "$2" in
                  err)  indent "$(printf "${RED}✖${NORMAL} ${DIM}%3s.${NORMAL} %s"    "$3" "$4")" "$5" ;;
                  warn) indent "$(printf "${YELLOW}▲${NORMAL} ${DIM}%3s.${NORMAL} %s" "$3" "$4")" "$5" ;;
                  out)  indent "$(printf "  ${DIM}%3s.${NORMAL} %s"                   "$3" "$4")" "$5" ;;
                  *)    indent "$(printf "${GREEN}✔${NORMAL} ${DIM}%3s.${NORMAL} %s"  "$2" "$3")" "$4" ;;
              esac ;;
        err)  echo "${RED}✖${NORMAL} ${BOLD}srcenv tests:${NORMAL} $2"    ;;
        warn) echo "${YELLOW}▲${NORMAL} ${BOLD}srcenv tests:${NORMAL} $2" ;;
        *)    echo "${GREEN}✔${NORMAL} ${BOLD}srcenv tests:${NORMAL} $1"  ;;
    esac
}

indent() {
    printf '%s\n' "$2" | while read -r line; do
        printf "%s%s\n" "$1" "$line"
    done
}

# endregion Framework

# region Setup

unset SRCENV_TEST_A
unset SRCENV_TEST_B
unset SRCENV_TEST_C
unset SRCENV_TEST_ESCAPE
unset SRCENV_TEST_MULTILINE
unset SRCENV_UNDO

export SRCENV_TEST_EXISTING=1
unset SRCENV_TEST_NOT_EXISTING

env_input=test.env
posix_input=test.env.sh

tee "$env_input" > /dev/null << 'EOF'
# Interpolation tests
SRCENV_TEST_A="${SRCENV_TEST_EXISTING:+6}"
SRCENV_TEST_B="${SRCENV_TEST_NOT_EXISTING:-7}"
SRCENV_TEST_C="$((SRCENV_TEST_A * SRCENV_TEST_B))"

# Escape sequence tests
SRCENV_TEST_ESCAPE="\$NOT_EXPANDED\t\r\n'\""

# Multi-line tests
SRCENV_TEST_MULTILINE="
$SRCENV_TEST_A
$SRCENV_TEST_B
$SRCENV_TEST_C"
EOF

tee "$posix_input" > /dev/null << 'EOF'
# Unexported variable tests
SRCENV_TEST_NOT_EXPORTED=1

# Interpolation tests
export SRCENV_TEST_A="${SRCENV_TEST_EXISTING:+6}"
export SRCENV_TEST_B="${SRCENV_TEST_NOT_EXISTING:-7}"
export SRCENV_TEST_C="$((SRCENV_TEST_A * SRCENV_TEST_B * SRCENV_TEST_NOT_EXPORTED))"

# Escape sequence tests
export SRCENV_TEST_ESCAPE="\$NOT_EXPANDED\t\r\n'\""

# Multi-line tests
export SRCENV_TEST_MULTILINE="
$SRCENV_TEST_A
$SRCENV_TEST_B
$SRCENV_TEST_C"
EOF

# shellcheck disable=SC2317
cleanup() {
    unset SRCENV_TEST_EXISTING

    rm -f "$env_input" "$posix_input"

    trap - EXIT
    exit
}

trap cleanup EXIT INT HUP TERM

# endregion Setup

# region Scripts

diff=\''reduce (env|del(._, .SHLVL)|keys[]) as $k ({}; if env[$k] != $snapshot[$k] then .[$k]=env[$k] else . end)'\'

{ posix_script="$(cat) $diff"; } << 'EOF'
snapshot="$(jq -n env)"; eval "$(./srcenv %s)"
jq --argjson snapshot "$snapshot" -n
EOF

{ csh_script="$(cat) $diff"; } << 'EOF'
set snapshot = "`jq -n env`"; set sourced = "`./srcenv %s`"
printf "%%s\\n" $sourced:q > test.csh.env
source test.csh.env
rm -f test.csh.env
jq --argjson snapshot "$snapshot:q" -n
EOF

{ fish_script="$(cat) $diff"; } << 'EOF'
set snapshot "$(jq -n env)"; ./srcenv %s | source
jq --argjson snapshot "$snapshot" -n
EOF

{ nu_setup_script="$(cat) $env_input"; } << 'EOF'
./srcenv %s | save -f test.nu.env
let filter = "%s"
./srcenv --json
EOF

{ nu_script="$(cat) $diff"; } << 'EOF'
let snapshot = (jq -n env); source test.nu.env
rm -f test.nu.env
let temp = "%s"
jq --argjson snapshot $snapshot -n
EOF

{ nu_json_script="$(cat) $diff"; } << 'EOF'
let snapshot = (jq -n env); ./srcenv %s | from json | load-env
jq --argjson snapshot $snapshot -n
EOF

{ pwsh_script="$(cat) $diff"; } << 'EOF'
$snapshot="$(jq -n env)"; Invoke-Expression ((&./srcenv %s) -join "`n")
jq --argjson snapshot "$snapshot" -n
EOF

# endregion Scripts

# region Outputs

{ json_output=$(cat); } << 'EOF'
{
  "SRCENV_TEST_A": "6",
  "SRCENV_TEST_B": "7",
  "SRCENV_TEST_C": "42",
  "SRCENV_TEST_ESCAPE": "$NOT_EXPANDED\\t\\r\\n'\"",
  "SRCENV_TEST_MULTILINE": "\n6\n7\n42"
}
EOF

{ json_backup_output=$(cat); } << 'EOF'
{
  "SRCENV_TEST_A": "6",
  "SRCENV_TEST_B": "7",
  "SRCENV_TEST_C": "42",
  "SRCENV_TEST_ESCAPE": "$NOT_EXPANDED\\t\\r\\n'\"",
  "SRCENV_TEST_MULTILINE": "\n6\n7\n42",
  "SRCENV_UNDO": "{\"SRCENV_TEST_A\":null,\"SRCENV_TEST_B\":null,\"SRCENV_TEST_C\":null,\"SRCENV_TEST_ESCAPE\":null,\"SRCENV_TEST_MULTILINE\":null,\"SRCENV_UNDO\":null}"
}
EOF

{ env_output=$(cat); } << 'EOF'
SRCENV_TEST_A='6'
SRCENV_TEST_B='7'
SRCENV_TEST_C='42'
SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"'
SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ env_backup_output=$(cat); } << 'EOF'
SRCENV_UNDO='{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ posix_output=$(cat); } << 'EOF'
export SRCENV_TEST_A='6'
export SRCENV_TEST_B='7'
export SRCENV_TEST_C='42'
export SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"'
export SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ posix_backup_output=$(cat); } << 'EOF'
export SRCENV_UNDO='{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ cmd_output_prefix=$(cat); } << 'EOF'
set LFM=^


set LF=^^^%LFM%%LFM%^%LFM%%LFM%
EOF

{ cmd_output_suffix=$(cat); } << 'EOF'
set LFM=
set LF=
EOF

{ cmd_output=$(cat); } << 'EOF'
set "SRCENV_TEST_A=6"
set "SRCENV_TEST_B=7"
set "SRCENV_TEST_C=42"
set "SRCENV_TEST_ESCAPE=$NOT_EXPANDED\t\r\n'^""
set "SRCENV_TEST_MULTILINE=%LF%6%LF%7%LF%42"
EOF

{ cmd_backup_output=$(cat); } << 'EOF'
set "SRCENV_UNDO={^"SRCENV_TEST_A^":null,^"SRCENV_TEST_B^":null,^"SRCENV_TEST_C^":null,^"SRCENV_TEST_ESCAPE^":null,^"SRCENV_TEST_MULTILINE^":null,^"SRCENV_UNDO^":null}"
EOF

{ csh_output=$(cat); } << 'EOF'
setenv SRCENV_TEST_A '6'
setenv SRCENV_TEST_B '7'
setenv SRCENV_TEST_C '42'
setenv SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
setenv SRCENV_TEST_MULTILINE '\
6\
7\
42'
EOF

{ csh_backup_output=$(cat); } << 'EOF'
setenv SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ elvish_output=$(cat); } << 'EOF'
set-env $SRCENV_TEST_A '6'
set-env $SRCENV_TEST_B '7'
set-env $SRCENV_TEST_C '42'
set-env $SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
set-env $SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ elvish_backup_output=$(cat); } << 'EOF'
set-env $SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ fish_output=$(cat); } << 'EOF'
set -gx SRCENV_TEST_A '6'
set -gx SRCENV_TEST_B '7'
set -gx SRCENV_TEST_C '42'
set -gx SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
set -gx SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ fish_backup_output=$(cat); } << 'EOF'
set -gx SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ launchctl_output=$(cat); } << 'EOF'
launchctl setenv SRCENV_TEST_A '6'
launchctl setenv SRCENV_TEST_B '7'
launchctl setenv SRCENV_TEST_C '42'
launchctl setenv SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
launchctl setenv SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ launchctl_backup_output=$(cat); } << 'EOF'
launchctl setenv SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ nu_output=$(cat); } << 'EOF'
$env.SRCENV_TEST_A = r#'6'#
$env.SRCENV_TEST_B = r#'7'#
$env.SRCENV_TEST_C = r#'42'#
$env.SRCENV_TEST_ESCAPE = r#'$NOT_EXPANDED\t\r\n'"'#
$env.SRCENV_TEST_MULTILINE = r#'
6
7
42'#
EOF

{ nu_backup_output=$(cat); } << 'EOF'
$env.SRCENV_UNDO = r#'{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'#
EOF

{ pwsh_output=$(cat); } << 'EOF'
$Env:SRCENV_TEST_A = '6'
$Env:SRCENV_TEST_B = '7'
$Env:SRCENV_TEST_C = '42'
$Env:SRCENV_TEST_ESCAPE = '$NOT_EXPANDED\t\r\n''"'
$Env:SRCENV_TEST_MULTILINE = '
6
7
42'
EOF

{ pwsh_backup_output=$(cat); } << 'EOF'
$Env:SRCENV_UNDO = '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

# endregion Outputs

# region Tests

start

run './srcenv --version' 'srcenv 1.3.6'

run './srcenv --invalid'              '' 2
run './srcenv not_a_file'             '' 1
run './srcenv --arg not_a_command'    '' 1

run './srcenv --arg "echo something"'                ''
run './srcenv --arg "echo something; not_a_command"' '' 1

run './srcenv '"$env_input"                           "$posix_output"
run './srcenv --export --arg "$(cat '"$env_input"')"' "$posix_output"
run './srcenv --export - < '"$env_input"''            "$posix_output"
run './srcenv --local '"$env_input"''                 ''
run './srcenv --local --arg "$(cat '"$env_input"')"'  ''
run './srcenv - < '"$env_input"''                     ''

run './srcenv --ash '"$env_input"        "$posix_output"
run './srcenv --bash '"$env_input"       "$posix_output"
run './srcenv --dash '"$env_input"       "$posix_output"
run './srcenv --ksh '"$env_input"        "$posix_output"
run './srcenv --pdksh '"$env_input"      "$posix_output"
run './srcenv --murex '"$env_input"      "$posix_output"
run './srcenv --posix '"$env_input"      "$posix_output"
run './srcenv --sh '"$env_input"         "$posix_output"
run './srcenv --zsh '"$env_input"        "$posix_output"
run './srcenv --bat '"$env_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
run './srcenv --cmd '"$env_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
run './srcenv --csh '"$env_input"        "$csh_output"
run './srcenv --tcsh '"$env_input"       "$csh_output"
run './srcenv --elvish '"$env_input"     "$elvish_output"
run './srcenv --fish '"$env_input"       "$fish_output"
run './srcenv --launchctl '"$env_input"  "$launchctl_output"
run './srcenv --nu '"$env_input"         "$nu_output"
run './srcenv --nushell '"$env_input"    "$nu_output"
run './srcenv --pwsh '"$env_input"       "$pwsh_output"
run './srcenv --powershell '"$env_input" "$pwsh_output"
run './srcenv --env '"$env_input"        "$env_output"
run './srcenv --json '"$env_input"       "$json_output"

run './srcenv --ash --backup '"$env_input"        "$posix_output${LF}$posix_backup_output"
run './srcenv --bash --backup '"$env_input"       "$posix_output${LF}$posix_backup_output"
run './srcenv --dash --backup '"$env_input"       "$posix_output${LF}$posix_backup_output"
run './srcenv --ksh --backup '"$env_input"        "$posix_output${LF}$posix_backup_output"
run './srcenv --pdksh --backup '"$env_input"      "$posix_output${LF}$posix_backup_output"
run './srcenv --murex --backup '"$env_input"      "$posix_output${LF}$posix_backup_output"
run './srcenv --posix --backup '"$env_input"      "$posix_output${LF}$posix_backup_output"
run './srcenv --sh --backup '"$env_input"         "$posix_output${LF}$posix_backup_output"
run './srcenv --zsh --backup '"$env_input"        "$posix_output${LF}$posix_backup_output"
run './srcenv --bat --backup '"$env_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_backup_output${LF}$cmd_output_suffix"
run './srcenv --cmd --backup '"$env_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_backup_output${LF}$cmd_output_suffix"
run './srcenv --csh --backup '"$env_input"        "$csh_output${LF}$csh_backup_output"
run './srcenv --tcsh --backup '"$env_input"       "$csh_output${LF}$csh_backup_output"
run './srcenv --elvish --backup '"$env_input"     "$elvish_output${LF}$elvish_backup_output"
run './srcenv --fish --backup '"$env_input"       "$fish_output${LF}$fish_backup_output"
run './srcenv --launchctl --backup '"$env_input"  "$launchctl_output${LF}$launchctl_backup_output"
run './srcenv --nu --backup '"$env_input"         "$nu_output${LF}$nu_backup_output"
run './srcenv --nushell --backup '"$env_input"    "$nu_output${LF}$nu_backup_output"
run './srcenv --pwsh --backup '"$env_input"       "$pwsh_output${LF}$pwsh_backup_output"
run './srcenv --powershell --backup '"$env_input" "$pwsh_output${LF}$pwsh_backup_output"
run './srcenv --env --backup '"$env_input"        "$env_output${LF}$env_backup_output"
run './srcenv --json --backup '"$env_input"       "$json_backup_output"

run './srcenv --ash --local '"$env_input"        ''
run './srcenv --bash --local '"$env_input"       ''
run './srcenv --dash --local '"$env_input"       ''
run './srcenv --ksh --local '"$env_input"        ''
run './srcenv --pdksh --local '"$env_input"      ''
run './srcenv --murex --local '"$env_input"      ''
run './srcenv --posix --local '"$env_input"      ''
run './srcenv --sh --local '"$env_input"         ''
run './srcenv --zsh --local '"$env_input"        ''
run './srcenv --bat --local '"$env_input"        "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
run './srcenv --cmd --local '"$env_input"        "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
run './srcenv --csh --local '"$env_input"        ''
run './srcenv --tcsh --local '"$env_input"       ''
run './srcenv --elvish --local '"$env_input"     ''
run './srcenv --fish --local '"$env_input"       ''
run './srcenv --launchctl --local '"$env_input"  ''
run './srcenv --nu --local '"$env_input"         ''
run './srcenv --nushell --local '"$env_input"    ''
run './srcenv --pwsh --local '"$env_input"       ''
run './srcenv --powershell --local '"$env_input" ''
run './srcenv --env --local '"$env_input"        ''
run './srcenv --json --local '"$env_input"       '{}'

run './srcenv --ash --local --backup '"$env_input"        ''
run './srcenv --bash --local --backup '"$env_input"       ''
run './srcenv --dash --local --backup '"$env_input"       ''
run './srcenv --ksh --local --backup '"$env_input"        ''
run './srcenv --pdksh --local --backup '"$env_input"      ''
run './srcenv --murex --local --backup '"$env_input"      ''
run './srcenv --posix --local --backup '"$env_input"      ''
run './srcenv --sh --local --backup '"$env_input"         ''
run './srcenv --zsh --local --backup '"$env_input"        ''
run './srcenv --bat --local --backup '"$env_input"        "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
run './srcenv --cmd --local --backup '"$env_input"        "$cmd_output_prefix${LF}${LF}$cmd_output_suffix"
run './srcenv --csh --local --backup '"$env_input"        ''
run './srcenv --tcsh --local --backup '"$env_input"       ''
run './srcenv --elvish --local --backup '"$env_input"     ''
run './srcenv --fish --local --backup '"$env_input"       ''
run './srcenv --launchctl --local --backup '"$env_input"  ''
run './srcenv --nu --local --backup '"$env_input"         ''
run './srcenv --nushell --local --backup '"$env_input"    ''
run './srcenv --pwsh --local --backup '"$env_input"       ''
run './srcenv --powershell --local --backup '"$env_input" ''
run './srcenv --env --local --backup '"$env_input"        ''
run './srcenv --json --local --backup '"$env_input"       '{}'

run './srcenv '"$posix_input"                  "$posix_output"
run './srcenv --arg "$(cat '"$posix_input"')"' "$posix_output"
run './srcenv - < '"$posix_input"              "$posix_output"

run './srcenv --ash '"$posix_input"        "$posix_output"
run './srcenv --bash '"$posix_input"       "$posix_output"
run './srcenv --dash '"$posix_input"       "$posix_output"
run './srcenv --ksh '"$posix_input"        "$posix_output"
run './srcenv --pdksh '"$posix_input"      "$posix_output"
run './srcenv --murex '"$posix_input"      "$posix_output"
run './srcenv --posix '"$posix_input"      "$posix_output"
run './srcenv --sh '"$posix_input"         "$posix_output"
run './srcenv --zsh '"$posix_input"        "$posix_output"
run './srcenv --bat '"$posix_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
run './srcenv --cmd '"$posix_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_output_suffix"
run './srcenv --csh '"$posix_input"        "$csh_output"
run './srcenv --tcsh '"$posix_input"       "$csh_output"
run './srcenv --elvish '"$posix_input"     "$elvish_output"
run './srcenv --fish '"$posix_input"       "$fish_output"
run './srcenv --launchctl '"$posix_input"  "$launchctl_output"
run './srcenv --nu '"$posix_input"         "$nu_output"
run './srcenv --nushell '"$posix_input"    "$nu_output"
run './srcenv --pwsh '"$posix_input"       "$pwsh_output"
run './srcenv --powershell '"$posix_input" "$pwsh_output"
run './srcenv --env '"$posix_input"        "$env_output"
run './srcenv --json '"$posix_input"       "$json_output"

run './srcenv --ash --backup '"$posix_input"        "$posix_output${LF}$posix_backup_output"
run './srcenv --bash --backup '"$posix_input"       "$posix_output${LF}$posix_backup_output"
run './srcenv --dash --backup '"$posix_input"       "$posix_output${LF}$posix_backup_output"
run './srcenv --ksh --backup '"$posix_input"        "$posix_output${LF}$posix_backup_output"
run './srcenv --pdksh --backup '"$posix_input"      "$posix_output${LF}$posix_backup_output"
run './srcenv --murex --backup '"$posix_input"      "$posix_output${LF}$posix_backup_output"
run './srcenv --posix --backup '"$posix_input"      "$posix_output${LF}$posix_backup_output"
run './srcenv --sh --backup '"$posix_input"         "$posix_output${LF}$posix_backup_output"
run './srcenv --zsh --backup '"$posix_input"        "$posix_output${LF}$posix_backup_output"
run './srcenv --bat --backup '"$posix_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_backup_output${LF}$cmd_output_suffix"
run './srcenv --cmd --backup '"$posix_input"        "$cmd_output_prefix${LF}$cmd_output${LF}$cmd_backup_output${LF}$cmd_output_suffix"
run './srcenv --csh --backup '"$posix_input"        "$csh_output${LF}$csh_backup_output"
run './srcenv --tcsh --backup '"$posix_input"       "$csh_output${LF}$csh_backup_output"
run './srcenv --elvish --backup '"$posix_input"     "$elvish_output${LF}$elvish_backup_output"
run './srcenv --fish --backup '"$posix_input"       "$fish_output${LF}$fish_backup_output"
run './srcenv --launchctl --backup '"$posix_input"  "$launchctl_output${LF}$launchctl_backup_output"
run './srcenv --nu --backup '"$posix_input"         "$nu_output${LF}$nu_backup_output"
run './srcenv --nushell --backup '"$posix_input"    "$nu_output${LF}$nu_backup_output"
run './srcenv --pwsh --backup '"$posix_input"       "$pwsh_output${LF}$pwsh_backup_output"
run './srcenv --powershell --backup '"$posix_input" "$pwsh_output${LF}$pwsh_backup_output"
run './srcenv --env --backup '"$posix_input"        "$env_output${LF}$env_backup_output"
run './srcenv --json --backup '"$posix_input"       "$json_backup_output"

detect() { command -v "$1" > /dev/null && echo 1; }
escape() { printf "'%s'\\n" "$(printf '%s' "$1" | sed -e "s/'/'\\\\''/g")"; }

# shellcheck disable=SC2059
run_script() {
    script="$(printf "$3" "$4")"

    run "$1" "$2 $(escape "$script")" "$json_output"
}

sh="$(detect sh)" || msg warn "sh not found; skipping tests..."
run "$sh" 'sh srcenv '"$env_input"                           "$posix_output"
run "$sh" 'sh srcenv --export --arg "$(cat '"$env_input"')"' "$posix_output"
run "$sh" 'sh srcenv --export - < '"$env_input"''            "$posix_output"
run_script "$sh" 'sh -c' "$posix_script" '--sh test.env'
run_script "$sh" 'sh -c' "$posix_script" '--sh test.env.sh'
run_script "$sh" 'sh -c' "$posix_script" 'test.env'
run_script "$sh" 'sh -c' "$posix_script" 'test.env.sh'

bash="$(detect bash)" || msg warn "Bash not found; skipping tests..."
run "$bash" 'bash srcenv '"$env_input"                           "$posix_output"
run "$bash" 'bash srcenv --export --arg "$(cat '"$env_input"')"' "$posix_output"
run "$bash" 'bash srcenv --export - < '"$env_input"''            "$posix_output"
run_script "$bash" 'bash -c' "$posix_script" '--bash test.env'
run_script "$bash" 'bash -c' "$posix_script" '--bash test.env.sh'
run_script "$bash" 'bash -c' "$posix_script" 'test.env'
run_script "$bash" 'bash -c' "$posix_script" 'test.env.sh'

dash="$(detect dash)" || msg warn "Dash not found; skipping tests..."
run "$dash" 'dash srcenv '"$env_input"                           "$posix_output"
run "$dash" 'dash srcenv --export --arg "$(cat '"$env_input"')"' "$posix_output"
run "$dash" 'dash srcenv --export - < '"$env_input"''            "$posix_output"
run_script "$dash" 'dash -c' "$posix_script" '--dash test.env'
run_script "$dash" 'dash -c' "$posix_script" '--dash test.env.sh'
run_script "$dash" 'dash -c' "$posix_script" 'test.env'
run_script "$dash" 'dash -c' "$posix_script" 'test.env.sh'

ksh="$(detect ksh)" || msg warn "Ksh not found; skipping tests..."
run "$ksh" 'ksh srcenv '"$env_input"                           "$posix_output"
run "$ksh" 'ksh srcenv --export --arg "$(cat '"$env_input"')"' "$posix_output"
run "$ksh" 'ksh srcenv --export - < '"$env_input"''            "$posix_output"
run_script "$ksh" 'ksh -c' "$posix_script" '--ksh test.env'
run_script "$ksh" 'ksh -c' "$posix_script" '--ksh test.env.sh'
run_script "$ksh" 'ksh -c' "$posix_script" 'test.env'
run_script "$ksh" 'ksh -c' "$posix_script" 'test.env.sh'

zsh="$(detect zsh)" || msg warn "Zsh not found; skipping tests..."
run "$zsh" 'zsh srcenv '"$env_input"                           "$posix_output"
run "$zsh" 'zsh srcenv --export --arg "$(cat '"$env_input"')"' "$posix_output"
run "$zsh" 'zsh srcenv --export - < '"$env_input"''            "$posix_output"
run_script "$zsh" 'zsh -c' "$posix_script" '--zsh test.env'
run_script "$zsh" 'zsh -c' "$posix_script" '--zsh test.env.sh'
run_script "$zsh" 'zsh -c' "$posix_script" 'test.env'
run_script "$zsh" 'zsh -c' "$posix_script" 'test.env.sh'

csh="$(detect csh)" || msg warn "Csh not found; skipping tests..."
run_script "$csh" 'csh -c' "$csh_script" '--csh test.env'
run_script "$csh" 'csh -c' "$csh_script" '--csh test.env.sh'
run_script "$csh" 'csh -c' "$csh_script" 'test.env'
run_script "$csh" 'csh -c' "$csh_script" 'test.env.sh'

tcsh="$(detect tcsh)" || msg warn "Tcsh not found; skipping tests..."
run_script "$tcsh" 'tcsh -c' "$csh_script" '--tcsh test.env'
run_script "$tcsh" 'tcsh -c' "$csh_script" '--tcsh test.env.sh'
run_script "$tcsh" 'tcsh -c' "$csh_script" 'test.env'
run_script "$tcsh" 'tcsh -c' "$csh_script" 'test.env.sh'

fish="$(detect fish)" || msg warn "Fish not found; skipping tests..."
run_script "$fish" 'fish -c' "$fish_script" '--fish test.env'
run_script "$fish" 'fish -c' "$fish_script" '--fish test.env.sh'
run_script "$fish" 'fish -c' "$fish_script" 'test.env'
run_script "$fish" 'fish -c' "$fish_script" 'test.env.sh'

nu="$(detect nu)" || msg warn "Nushell not found; skipping tests..."
run_script "$nu" 'nu -c' "$nu_json_script"  '--json test.env'
run_script "$nu" 'nu -c' "$nu_json_script"  '--json test.env.sh'
run_script "$nu" 'nu -c' "$nu_setup_script" '--nu test.env'
run_script "$nu" 'nu -c' "$nu_script"
run_script "$nu" 'nu -c' "$nu_setup_script" '--nu test.env'
run_script "$nu" 'nu -c' "$nu_script"
run_script "$nu" 'nu -c' "$nu_setup_script" '--nu test.env'
run_script "$nu" 'nu -c' "$nu_script"
run_script "$nu" 'nu -c' "$nu_setup_script" '--nu test.env'
run_script "$nu" 'nu -c' "$nu_script"

pwsh="$(detect pwsh)" || msg warn "PowerShell not found; skipping tests..."
run_script "$pwsh" 'pwsh -c' "$pwsh_script" '--pwsh test.env'
run_script "$pwsh" 'pwsh -c' "$pwsh_script" '--pwsh test.env.sh'
run_script "$pwsh" 'pwsh -c' "$pwsh_script" 'test.env'
run_script "$pwsh" 'pwsh -c' "$pwsh_script" 'test.env.sh'

end

# endregion Tests
