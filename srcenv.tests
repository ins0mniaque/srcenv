#!/bin/sh
#
# srcenv.tests - Test suite for srcenv

# region Framework
#
# Usage: test <command> <expected output> [<expected exit code>]
#        end

tests_exitcode=0

alias test='unit_test "$LINENO"'

end() {
    exit $tests_exitcode
}

NORMAL=$(tput sgr0 2> /dev/null || printf "\e[0m")
RED=$(tput setaf 1 2> /dev/null || printf "\e[31m")
GREEN=$(tput setaf 2 2> /dev/null || printf "\e[32m")

# shellcheck disable=SC2317
unit_test() {
    line="${1:+[Line $1] }"; cmd="$2"; output="$($2 2> /dev/null)"; exitcode=$?;
    expected="$3"; expected_exitcode="${4:-0}"

    if [ "$output" != "$expected" ]; then
        tests_exitcode=1
        printf "%s${RED}✖${NORMAL} %s: %s ${RED}!=${NORMAL} %s\n" \
               "$line" "$cmd" "$output" "$expected" >&2
    elif [ "$exitcode" != "$expected_exitcode" ]; then
        tests_exitcode=1
        printf "%s${RED}✖${NORMAL} %s: Exit code %s ${RED}!=${NORMAL} Exit code %s\n" \
               "$line" "$cmd" "$exitcode" "$expected_exitcode" >&2
    else
        printf "%s${GREEN}✔${NORMAL} %s\n" "$line" "$cmd" >&2
    fi
}

# endregion Framework

# region Setup

unset SRCENV_UNDO

export SRCENV_TEST_EXISTING=1
unset SRCENV_TEST_NOT_EXISTING

env_input=./test.env
posix_input=./test.env.sh

tee "$env_input" > /dev/null << 'EOF'
# Interpolation tests
SRCENV_TEST_A="${SRCENV_TEST_EXISTING:+6}"
SRCENV_TEST_B="${SRCENV_TEST_NOT_EXISTING:-7}"
SRCENV_TEST_C="$((SRCENV_TEST_A * SRCENV_TEST_B))"

# Escape sequence tests
SRCENV_TEST_ESCAPE="\$NOT_EXPANDED\t\r\n'\""

# Multi-line tests
SRCENV_TEST_MULTILINE="
$SRCENV_TEST_A
$SRCENV_TEST_B
$SRCENV_TEST_C"
EOF

tee "$posix_input" > /dev/null << 'EOF'
# Unexported variable tests
SRCENV_TEST_NOT_EXPORTED=1

# Interpolation tests
export SRCENV_TEST_A="${SRCENV_TEST_EXISTING:+6}"
export SRCENV_TEST_B="${SRCENV_TEST_NOT_EXISTING:-7}"
export SRCENV_TEST_C="$((SRCENV_TEST_A * SRCENV_TEST_B * SRCENV_TEST_NOT_EXPORTED))"

# Escape sequence tests
export SRCENV_TEST_ESCAPE="\$NOT_EXPANDED\t\r\n'\""

# Multi-line tests
export SRCENV_TEST_MULTILINE="
$SRCENV_TEST_A
$SRCENV_TEST_B
$SRCENV_TEST_C"
EOF

# shellcheck disable=SC2317
cleanup() {
    unset SRCENV_TEST_EXISTING

    rm -f "$env_input"
    rm -f "$posix_input"

    trap - EXIT
    exit
}

trap cleanup EXIT INT HUP TERM

# endregion Setup

# region Outputs

{ env_output=$(cat); } << 'EOF'
SRCENV_TEST_A='6'
SRCENV_TEST_B='7'
SRCENV_TEST_C='42'
SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"'
SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ env_backup_output=$(printf "%s\n%s" "$env_output" "$(cat)"); } << 'EOF'
SRCENV_UNDO='{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ posix_output=$(cat); } << 'EOF'
export SRCENV_TEST_A='6'
export SRCENV_TEST_B='7'
export SRCENV_TEST_C='42'
export SRCENV_TEST_ESCAPE='$NOT_EXPANDED\t\r\n'\''"'
export SRCENV_TEST_MULTILINE='
6
7
42'
EOF

{ posix_backup_output=$(printf "%s\n%s" "$posix_output" "$(cat)"); } << 'EOF'
export SRCENV_UNDO='{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ cmd_output_prefix=$(cat); } << 'EOF'
set LFM=^


set LF=^^^%LFM%%LFM%^%LFM%%LFM%
EOF

{ cmd_output=$(printf "%s\n%s" "$cmd_output_prefix" "$(cat)"); } << 'EOF'
set "SRCENV_TEST_A=6"
set "SRCENV_TEST_B=7"
set "SRCENV_TEST_C=42"
set "SRCENV_TEST_ESCAPE=$NOT_EXPANDED\t\r\n'^""
set "SRCENV_TEST_MULTILINE=%LF%6%LF%7%LF%42"
EOF

{ cmd_backup_output=$(printf "%s\n%s" "$cmd_output" "$(cat)"); } << 'EOF'
set "SRCENV_UNDO={^"SRCENV_TEST_A^":null,^"SRCENV_TEST_B^":null,^"SRCENV_TEST_C^":null,^"SRCENV_TEST_ESCAPE^":null,^"SRCENV_TEST_MULTILINE^":null,^"SRCENV_UNDO^":null}"
EOF

{ elvish_output=$(cat); } << 'EOF'
set-env $SRCENV_TEST_A '6'
set-env $SRCENV_TEST_B '7'
set-env $SRCENV_TEST_C '42'
set-env $SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
set-env $SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ elvish_backup_output=$(printf "%s\n%s" "$elvish_output" "$(cat)"); } << 'EOF'
set-env $SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ fish_output=$(cat); } << 'EOF'
set -gx SRCENV_TEST_A '6'
set -gx SRCENV_TEST_B '7'
set -gx SRCENV_TEST_C '42'
set -gx SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
set -gx SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ fish_backup_output=$(printf "%s\n%s" "$fish_output" "$(cat)"); } << 'EOF'
set -gx SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ launchctl_output=$(cat); } << 'EOF'
launchctl setenv SRCENV_TEST_A '6'
launchctl setenv SRCENV_TEST_B '7'
launchctl setenv SRCENV_TEST_C '42'
launchctl setenv SRCENV_TEST_ESCAPE '$NOT_EXPANDED\t\r\n'\''"'
launchctl setenv SRCENV_TEST_MULTILINE '
6
7
42'
EOF

{ launchctl_backup_output=$(printf "%s\n%s" "$launchctl_output" "$(cat)"); } << 'EOF'
launchctl setenv SRCENV_UNDO '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ nu_output=$(cat); } << 'EOF'
$env.SRCENV_TEST_A = '6'
$env.SRCENV_TEST_B = '7'
$env.SRCENV_TEST_C = '42'
$env.SRCENV_TEST_ESCAPE = '$NOT_EXPANDED\t\r\n'\''"'
$env.SRCENV_TEST_MULTILINE = '
6
7
42'
EOF

{ nu_backup_output=$(printf "%s\n%s" "$nu_output" "$(cat)"); } << 'EOF'
$env.SRCENV_UNDO = '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

{ pwsh_output=$(cat); } << 'EOF'
$Env:SRCENV_TEST_A = '6'
$Env:SRCENV_TEST_B = '7'
$Env:SRCENV_TEST_C = '42'
$Env:SRCENV_TEST_ESCAPE = '$NOT_EXPANDED\t\r\n'\''"'
$Env:SRCENV_TEST_MULTILINE = '
6
7
42'
EOF

{ pwsh_backup_output=$(printf "%s\n%s" "$pwsh_output" "$(cat)"); } << 'EOF'
$Env:SRCENV_UNDO = '{"SRCENV_TEST_A":null,"SRCENV_TEST_B":null,"SRCENV_TEST_C":null,"SRCENV_TEST_ESCAPE":null,"SRCENV_TEST_MULTILINE":null,"SRCENV_UNDO":null}'
EOF

# endregion Outputs

# region Tests

test "./srcenv --version" "srcenv 1.2.11"

test "./srcenv --invalid" "" 1

test "./srcenv $env_input"                       "$env_output"
# test "./srcenv --export --arg $(cat $env_input)" "$env_output"  # TODO: Fix test framework arg support
# test "./srcenv --export - < $env_input"          "$env_output"  # TODO: Fix test framework STDIN support
test "./srcenv --local $env_input"               ""
# test "./srcenv --local --arg $(cat $env_input)"  ""             # TODO: Fix test framework arg support
# test "./srcenv - < $env_input"                   ""             # TODO: Fix test framework STDIN support

test "./srcenv --ash $env_input"        "$posix_output"
test "./srcenv --bash $env_input"       "$posix_output"
test "./srcenv --csh $env_input"        "$posix_output"
test "./srcenv --tcsh $env_input"       "$posix_output"
test "./srcenv --dash $env_input"       "$posix_output"
test "./srcenv --ksh $env_input"        "$posix_output"
test "./srcenv --pdksh $env_input"      "$posix_output"
test "./srcenv --murex $env_input"      "$posix_output"
test "./srcenv --posix $env_input"      "$posix_output"
test "./srcenv --sh $env_input"         "$posix_output"
test "./srcenv --zsh $env_input"        "$posix_output"
test "./srcenv --bat $env_input"        "$cmd_output"
test "./srcenv --cmd $env_input"        "$cmd_output"
test "./srcenv --elvish $env_input"     "$elvish_output"
test "./srcenv --fish $env_input"       "$fish_output"
test "./srcenv --launchctl $env_input"  "$launchctl_output"
test "./srcenv --nu $env_input"         "$nu_output"
test "./srcenv --nushell $env_input"    "$nu_output"
test "./srcenv --pwsh $env_input"       "$pwsh_output"
test "./srcenv --powershell $env_input" "$pwsh_output"
test "./srcenv --env $env_input"        "$env_output"

test "./srcenv --ash --backup $env_input"        "$posix_backup_output"
test "./srcenv --bash --backup $env_input"       "$posix_backup_output"
test "./srcenv --csh --backup $env_input"        "$posix_backup_output"
test "./srcenv --tcsh --backup $env_input"       "$posix_backup_output"
test "./srcenv --dash --backup $env_input"       "$posix_backup_output"
test "./srcenv --ksh --backup $env_input"        "$posix_backup_output"
test "./srcenv --pdksh --backup $env_input"      "$posix_backup_output"
test "./srcenv --murex --backup $env_input"      "$posix_backup_output"
test "./srcenv --posix --backup $env_input"      "$posix_backup_output"
test "./srcenv --sh --backup $env_input"         "$posix_backup_output"
test "./srcenv --zsh --backup $env_input"        "$posix_backup_output"
test "./srcenv --bat --backup $env_input"        "$cmd_backup_output"
test "./srcenv --cmd --backup $env_input"        "$cmd_backup_output"
test "./srcenv --elvish --backup $env_input"     "$elvish_backup_output"
test "./srcenv --fish --backup $env_input"       "$fish_backup_output"
test "./srcenv --launchctl --backup $env_input"  "$launchctl_backup_output"
test "./srcenv --nu --backup $env_input"         "$nu_backup_output"
test "./srcenv --nushell --backup $env_input"    "$nu_backup_output"
test "./srcenv --pwsh --backup $env_input"       "$pwsh_backup_output"
test "./srcenv --powershell --backup $env_input" "$pwsh_backup_output"
test "./srcenv --env --backup $env_input"        "$env_backup_output"

test "./srcenv --ash --local $env_input"        ""
test "./srcenv --bash --local $env_input"       ""
test "./srcenv --csh --local $env_input"        ""
test "./srcenv --tcsh --local $env_input"       ""
test "./srcenv --dash --local $env_input"       ""
test "./srcenv --ksh --local $env_input"        ""
test "./srcenv --pdksh --local $env_input"      ""
test "./srcenv --murex --local $env_input"      ""
test "./srcenv --posix --local $env_input"      ""
test "./srcenv --sh --local $env_input"         ""
test "./srcenv --zsh --local $env_input"        ""
test "./srcenv --bat --local $env_input"        "$cmd_output_prefix"
test "./srcenv --cmd --local $env_input"        "$cmd_output_prefix"
test "./srcenv --elvish --local $env_input"     ""
test "./srcenv --fish --local $env_input"       ""
test "./srcenv --launchctl --local $env_input"  ""
test "./srcenv --nu --local $env_input"         ""
test "./srcenv --nushell --local $env_input"    ""
test "./srcenv --pwsh --local $env_input"       ""
test "./srcenv --powershell --local $env_input" ""
test "./srcenv --env --local $env_input"        ""

test "./srcenv --ash --local --backup $env_input"        ""
test "./srcenv --bash --local --backup $env_input"       ""
test "./srcenv --csh --local --backup $env_input"        ""
test "./srcenv --tcsh --local --backup $env_input"       ""
test "./srcenv --dash --local --backup $env_input"       ""
test "./srcenv --ksh --local --backup $env_input"        ""
test "./srcenv --pdksh --local --backup $env_input"      ""
test "./srcenv --murex --local --backup $env_input"      ""
test "./srcenv --posix --local --backup $env_input"      ""
test "./srcenv --sh --local --backup $env_input"         ""
test "./srcenv --zsh --local --backup $env_input"        ""
test "./srcenv --bat --local --backup $env_input"        "$cmd_output_prefix"
test "./srcenv --cmd --local --backup $env_input"        "$cmd_output_prefix"
test "./srcenv --elvish --local --backup $env_input"     ""
test "./srcenv --fish --local --backup $env_input"       ""
test "./srcenv --launchctl --local --backup $env_input"  ""
test "./srcenv --nu --local --backup $env_input"         ""
test "./srcenv --nushell --local --backup $env_input"    ""
test "./srcenv --pwsh --local --backup $env_input"       ""
test "./srcenv --powershell --local --backup $env_input" ""
test "./srcenv --env --local --backup $env_input"        ""

test "./srcenv $posix_input"              "$env_output"
# test "./srcenv --arg $(cat $posix_input)" "$env_output"  # TODO: Fix test framework arg support
# test "./srcenv - < $posix_input"          "$env_output"  # TODO: Fix test framework STDIN support

test "./srcenv --ash $posix_input"        "$posix_output"
test "./srcenv --bash $posix_input"       "$posix_output"
test "./srcenv --csh $posix_input"        "$posix_output"
test "./srcenv --tcsh $posix_input"       "$posix_output"
test "./srcenv --dash $posix_input"       "$posix_output"
test "./srcenv --ksh $posix_input"        "$posix_output"
test "./srcenv --pdksh $posix_input"      "$posix_output"
test "./srcenv --murex $posix_input"      "$posix_output"
test "./srcenv --posix $posix_input"      "$posix_output"
test "./srcenv --sh $posix_input"         "$posix_output"
test "./srcenv --zsh $posix_input"        "$posix_output"
test "./srcenv --bat $posix_input"        "$cmd_output"
test "./srcenv --cmd $posix_input"        "$cmd_output"
test "./srcenv --elvish $posix_input"     "$elvish_output"
test "./srcenv --fish $posix_input"       "$fish_output"
test "./srcenv --launchctl $posix_input"  "$launchctl_output"
test "./srcenv --nu $posix_input"         "$nu_output"
test "./srcenv --nushell $posix_input"    "$nu_output"
test "./srcenv --pwsh $posix_input"       "$pwsh_output"
test "./srcenv --powershell $posix_input" "$pwsh_output"
test "./srcenv --env $posix_input"        "$env_output"

test "./srcenv --ash --backup $posix_input"        "$posix_backup_output"
test "./srcenv --bash --backup $posix_input"       "$posix_backup_output"
test "./srcenv --csh --backup $posix_input"        "$posix_backup_output"
test "./srcenv --tcsh --backup $posix_input"       "$posix_backup_output"
test "./srcenv --dash --backup $posix_input"       "$posix_backup_output"
test "./srcenv --ksh --backup $posix_input"        "$posix_backup_output"
test "./srcenv --pdksh --backup $posix_input"      "$posix_backup_output"
test "./srcenv --murex --backup $posix_input"      "$posix_backup_output"
test "./srcenv --posix --backup $posix_input"      "$posix_backup_output"
test "./srcenv --sh --backup $posix_input"         "$posix_backup_output"
test "./srcenv --zsh --backup $posix_input"        "$posix_backup_output"
test "./srcenv --bat --backup $posix_input"        "$cmd_backup_output"
test "./srcenv --cmd --backup $posix_input"        "$cmd_backup_output"
test "./srcenv --elvish --backup $posix_input"     "$elvish_backup_output"
test "./srcenv --fish --backup $posix_input"       "$fish_backup_output"
test "./srcenv --launchctl --backup $posix_input"  "$launchctl_backup_output"
test "./srcenv --nu --backup $posix_input"         "$nu_backup_output"
test "./srcenv --nushell --backup $posix_input"    "$nu_backup_output"
test "./srcenv --pwsh --backup $posix_input"       "$pwsh_backup_output"
test "./srcenv --powershell --backup $posix_input" "$pwsh_backup_output"
test "./srcenv --env --backup $posix_input"        "$env_backup_output"

end

# endregion Tests
